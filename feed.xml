<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://techmunching.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://techmunching.com/" rel="alternate" type="text/html"/><updated>2021-06-21T17:30:31+00:00</updated><id>https://techmunching.com/feed.xml</id><title type="html">TechMunching</title><subtitle>Your daily tech snack</subtitle><entry><title type="html">Approaching System Design for Interviews Methodically</title><link href="https://techmunching.com/a-methodical-approach-to-system-design/" rel="alternate" type="text/html" title="Approaching System Design for Interviews Methodically"/><published>2021-04-24T00:00:00+00:00</published><updated>2021-04-24T00:00:00+00:00</updated><id>https://techmunching.com/a-methodical-approach-to-system-design</id><content type="html" xml:base="https://techmunching.com/a-methodical-approach-to-system-design/">&lt;h1 id=&quot;dreaded-night-before-the-interview&quot;&gt;Dreaded night before the interview&lt;/h1&gt; &lt;p&gt;A few weeks ago, my friend got a chance to interview at &lt;em&gt;Google&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;Nitin is an accredited software developer from IIT working at a big product based software development firm (such as FAANG). For me, he belongs firmly in the category of ‘Big Deals’ in the programming sphere. So before the interview day, he calls me up:&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/photo-1598979072634-26e2d8821e68.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/photo-1598979072634-26e2d8821e68.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/photo-1598979072634-26e2d8821e68.jpg&quot; alt=&quot;Interview at FAANG&quot; /&gt; &lt;/picture&gt; &lt;p&gt;“I wish system design was as easy as recurssion, wherein you have a base-case following which you perform the core computation and conclude with a result, you get it right? Something that I could estimate, I knew the next step for?”&lt;/p&gt; &lt;p&gt;Relatable, right? It isn’t that System Design is difficult, however, it’s just the case that either you haven’t had a chance to work on large scale architectures or else you worked on just a tiny part of it. In both the scenarios, we end up being not so confident about our readiness for a system design interview rounds.&lt;/p&gt; &lt;p&gt;Take for example, I ask you to represent 32 as a power of 2. You could immediately go on a step by step method of doing that, few possible solutions being: &lt;img src=&quot;https://latex.codecogs.com/svg.image?\log_2&amp;space;32\:=\:?,\:answer\:=\:5&quot; title=&quot;\log_2 32\:=\:5,\:answer\:=\:5&quot; width=&quot;40%&quot; /&gt; &lt;img src=&quot;https://latex.codecogs.com/svg.image?32\:/\:2^?\:=\:1,\:answer\:=\:5&quot; title=&quot;32\:/\:2^?\:=\:1,\:answer\:=\:5&quot; width=&quot;40%&quot; /&gt;&lt;/p&gt; &lt;p&gt;In both the scenarios, you exactly knew what the next steps are and you could execute on those.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;we-need-a-design-system-for-system-design&quot;&gt;We need a design system for system design&lt;/h2&gt; &lt;p&gt;Today, with enornous number of articles/books/lectures on system design and yet we are lacking a methodical approach, a step-by-step journey to master every system design question and have an appropriate discussion. A user manual for System Design could end up being so helpful to countless software developers, making system design interviews a breeze.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/vector-21731841.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/vector-21731841.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/vector-21731841.jpg&quot; alt=&quot;System Design Masterclass and guide&quot; /&gt; &lt;/picture&gt; &lt;hr /&gt; &lt;h2 id=&quot;introducing-techmunching---hitchhikers-guide-to-system-design&quot;&gt;Introducing, TechMunching - Hitchhiker’s guide to System Design&lt;/h2&gt; &lt;p&gt;&lt;br /&gt; To read Hitchhiker’s guide is to step into the alien world of Systen Design with yoda guiding your soul through a perplexing world, assuring you “Don’t panic”. &amp;lt;/br&amp;gt; At TechMunching, henceforth, our mission is to instill confidence allowing you to lead and be in-charge of every system design discussion. In Hitchhiker’s guide to System Design, we explain the concepts with both a &lt;em&gt;explain me like I am 5&lt;/em&gt; and the &lt;em&gt;Rocket Science&lt;/em&gt; version.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Innovation is taking two things that already exist and putting them together in a new way.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;This is the first of a multi-part series of the complete guide. Here is a little glimpse of what you see in this journey:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Applying a generic template to guage the problem&lt;/li&gt; &lt;li&gt;Acronyms at each step, so that you don’t miss anything&lt;/li&gt; &lt;li&gt;Availbility of cheat-sheet for calculations, MAU, DAU, DAWU&lt;/li&gt; &lt;li&gt;Breaking each problem into known categories like big image (Instagram), small video (Tik Tok, Reels), so that concepts can be inter-related&lt;/li&gt; &lt;li&gt;Yardstick to measure the success and failure of the solution you are presenting&lt;/li&gt; &lt;li&gt;Code for common patterns cache, load balancer, hash functions, authentication, cookie, redirection&lt;/li&gt; &lt;li&gt;Questions to ask at each step which doesn’t overwhelm you or the interviewer&lt;/li&gt; &lt;li&gt;Higher package and a Happy life :P&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;We value every comment provided to us. Hence, write down in comments below if your have doubts or suggestion.&lt;/p&gt; &lt;hr /&gt; &lt;h2 id=&quot;applying-the-knowledge&quot;&gt;Applying the knowledge&lt;/h2&gt; &lt;p&gt;Now let’s try to embark on this journey, with the a simple and a hard problem. I am sure we all have seen and read these problem multiple times. But what differs here is the approach and steps we take to make it easy to execute and remember.&lt;/p&gt; &lt;p&gt;In the capacity of current post, we would be focussing on requirements and capacity estimation.&lt;/p&gt; &lt;h3 id=&quot;url-shortening&quot;&gt;URL Shortening&lt;/h3&gt; &lt;p&gt;Referring to the template section 1., we remind ourselfs to have 3 types of requirements (remember acronym ENF - enough)&lt;/p&gt; &lt;h4 id=&quot;requirements-template-section-1&quot;&gt;Requirements [Template: &lt;a href=&quot;#section-1-requirements-quick-look-sheet&quot;&gt;Section 1&lt;/a&gt;]&lt;/h4&gt; &lt;h5 id=&quot;functional-requirements-for-url-shortener&quot;&gt;Functional Requirements for URL shortener&lt;/h5&gt; &lt;ul&gt; &lt;li&gt;Generate a short and unique alias of any URL.&lt;/li&gt; &lt;li&gt;When users hit the short link, our system should redirect them to the original link.&lt;/li&gt; &lt;li&gt;Links may expire after a duration and users can specify the expiration time.&lt;/li&gt; &lt;li&gt;Custom link may or may not be included in this set of requirements.&lt;/li&gt; &lt;/ul&gt; &lt;h5 id=&quot;non-functional-requirements-for-url-shortener&quot;&gt;Non-functional Requirements for URL shortener&lt;/h5&gt; &lt;ul&gt; &lt;li&gt;The system should be highly available (In case, the service is down, all redirections will fail).&lt;/li&gt; &lt;li&gt;URL redirection should happen in real-time (It should be lightning fast).&lt;/li&gt; &lt;li&gt;Shortened URLs should not be easily predictable (from a security point of view).&lt;/li&gt; &lt;/ul&gt; &lt;h5 id=&quot;extended-requirements-for-url-shortener&quot;&gt;Extended Requirements for URL shortener&lt;/h5&gt; &lt;ul&gt; &lt;li&gt;Building REST system for B2B offering&lt;/li&gt; &lt;li&gt;Logging and analytics&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;capacity-estimation-template-section-2&quot;&gt;Capacity Estimation [Template: &lt;a href=&quot;#section-2-capacity-quick-look-sheet&quot;&gt;Section 2&lt;/a&gt;]&lt;/h4&gt; &lt;h5 id=&quot;behaviour-estimation&quot;&gt;Behaviour estimation&lt;/h5&gt; &lt;p&gt;As shortened URL would be used by many users once shortened, our system would be a read-heavy system. We define that our system is text content based and small content size in &lt;a href=&quot;#img-in-content&quot;&gt;table&lt;/a&gt;. Let’s assume, one user may request for a new URL and use it 100 times for redirection. So, the ratio between write and read would be: &lt;img src=&quot;https://latex.codecogs.com/svg.image?write\::\:read\:=\:1\::100&quot; title=&quot;write\::\:read\:=\:1\::100&quot; /&gt;&lt;/p&gt; &lt;h5 id=&quot;traffic-estimation&quot;&gt;Traffic estimation&lt;/h5&gt; &lt;p&gt;How many URL requests is the service capable of handling?&lt;/p&gt; &lt;p&gt;Reading from &lt;a href=&quot;#img-in-dau&quot;&gt;table&lt;/a&gt;, we see that our daily active users are &lt;code&gt;100K&lt;/code&gt;, which concludes are monthly requests to: &lt;img src=&quot;https://latex.codecogs.com/svg.image?dau\:*url\:writes\:per\:user\:*\:30\:days\:=\:100K\:*\:100\:*\:30\:=\:300M&quot; title=&quot;dau\:*url\:writes\:per\:user\:*\:30\:days\:=\:100k\:*\:100\:*\:30\:=\:300million&quot; /&gt;&lt;/p&gt; &lt;p&gt;Further, calculating the URL read redirections from the short link: &lt;img src=&quot;https://latex.codecogs.com/svg.image?total\:monthly\:writes\:*\:read\:ratio\:=\:300\:M\:*\:100\:=\:30\:B\:url\:per\:month&quot; title=&quot;total\:monthly\:writes\:*\:read\:ratio\:=\:300\:million\:*\:100\:=\:30\:billion\:url\:per\:month&quot; /&gt;&lt;/p&gt; &lt;p&gt;For URL per second calculation. You could also use 2.5M as the estimation for 30 * 24 * 3600 as per &lt;a href=&quot;#img-for-latency&quot;&gt;table&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?300\:M\:/\:(30\:days\:*\:24\:hours\:*\:3600\:secs)\:=\:120\:url\:/\:sec&quot; title=&quot;500\:million\:/\:(30\:days\:*\:24\:hours\:*\:3600\:secs)\:=\:200\:url\:/\:sec&quot; /&gt;&lt;/p&gt; &lt;p&gt;URL redirections:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?url\:redirection\:*\:read\:ratio\:=\:120\:*\:100\:=\:12K\:url\:redirections\:/\:sec&quot; title=&quot;200\:*\:100\:=\:20k\:url\:redirections\:/\:sec&quot; /&gt;&lt;/p&gt; &lt;h5 id=&quot;bandwidth-estimation&quot;&gt;Bandwidth estimation:&lt;/h5&gt; &lt;p&gt;Let’s say that each stored object is approximately 500 bytes, please refer &lt;a href=&quot;#img-for-content&quot;&gt;table&lt;/a&gt; for grasping the estimation.&lt;/p&gt; &lt;p&gt;For write requests: &lt;img src=&quot;https://latex.codecogs.com/svg.image?120\:*\:500\:bytes\:=\:60KB\:/\:sec&quot; title=&quot;120\:*\:500\:bytes\:=\:60KB\:/\:sec&quot; /&gt;&lt;/p&gt; &lt;p&gt;For read requests: &lt;img src=&quot;https://latex.codecogs.com/svg.image?12K\:*\:500\:bytes\:=\:6MB\:/\:sec&quot; title=&quot;12K\:*\:500\:bytes\:=\:6MB\:/\:sec&quot; /&gt;&lt;/p&gt; &lt;h5 id=&quot;data-storage-estimation&quot;&gt;Data storage estimation:&lt;/h5&gt; &lt;p&gt;Let’s assume, the system stores all the URL shortening requests and their shortened link for 5 years. As we expect to have 300M new URLs every month, the total number of objects we expect to store will be: &lt;img src=&quot;https://latex.codecogs.com/svg.image?300\:M\:*\:(5\:*\:12)\:months\:=\:18\:billion\:objects&quot; title=&quot;500\:M\:*\:(5\:*\:12)\:months\:=\:30\:billion\:objects&quot; /&gt;&lt;/p&gt; &lt;p&gt;For that we will need total storage of: &lt;img src=&quot;https://latex.codecogs.com/svg.image?18\:billion\:*\:500\:bytes\:=\:9\:TB&quot; title=&quot;30\:billion\:*\:500\:bytes\:=\:15\:TB&quot; /&gt;&lt;/p&gt; &lt;h5 id=&quot;cache-memory-estimation&quot;&gt;Cache memory estimation:&lt;/h5&gt; &lt;p&gt;If we follow the 80–20 rule, meaning we aim to serve 20% request from the cache itself. Since we have 12K redirections per second:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://latex.codecogs.com/svg.image?12K\:*\:3600\:seconds\:*\:24\:hours\:=\:~1\:billion\:requests\:per\:day&quot; title=&quot;20K\:*\:3600\:seconds\:*\:24\:hours\:=\:~1.7\:billion\:requests\:per\:day&quot; /&gt;&lt;/p&gt; &lt;p&gt;If we plan to cache 20% of these requests, we will need: &lt;img src=&quot;https://latex.codecogs.com/svg.image?0.2\:*\:1\:billion\:*\:500\:bytes\:=\:~100GB\:of\:memory&quot; title=&quot;0.2\:*\:1.7\:billion\:*\:500\:bytes\:=\:~170GB\:of\:memory&quot; /&gt;&lt;/p&gt; &lt;p&gt;(Actual requests might be duplicated so this number is more than sufficient)&lt;/p&gt; &lt;p&gt;This somes up our requirements and capacity estimations for the URL shortner system design.&lt;/p&gt; &lt;h3 id=&quot;youtube&quot;&gt;Youtube&lt;/h3&gt; &lt;p&gt;Taking step two, we now look how templates makes our calculation generically application to different problems. Let’s say we are trying to design Youtube, so our service will be of content type &lt;code&gt;Video - Lager&lt;/code&gt; which gives us the average size of 100MB as per &lt;a href=&quot;#img-for-content&quot;&gt;table&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Content Type: Video - Large&lt;/li&gt; &lt;li&gt;Average Size: 100MB&lt;/li&gt; &lt;li&gt;Daily Active writes per user: 0.001&lt;/li&gt; &lt;li&gt;Daily Active Users: 800M&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;So our database size for the above example becomes:&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/ExampleYoutube.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/ExampleYoutube.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/ExampleYoutube.jpg&quot; alt=&quot;Youtube System Design&quot; /&gt; &lt;/picture&gt; &lt;hr /&gt; &lt;h3 id=&quot;template&quot;&gt;Template&lt;/h3&gt; &lt;!-- https://www.tablesgenerator.com/markdown_tables --&gt; &lt;p&gt;&lt;a name=&quot;section_1&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;h5 id=&quot;section-1-requirements-quick-look-sheet&quot;&gt;Section 1. Requirements, Quick look sheet:&lt;/h5&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/requirementTable.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/requirementTable.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/requirementTable.jpg&quot; alt=&quot;Requirement Table of System Design&quot; /&gt; &lt;/picture&gt; &lt;h5 id=&quot;functional-requirements&quot;&gt;Functional requirements:&lt;/h5&gt; &lt;p&gt;You may call this the system’s main goal. A functional statement is described here as a set of outputs and inputs. Let’s say we are able to identify system perform 4 functions, those 4 requirements we should be able to jot down in this step.&lt;/p&gt; &lt;p&gt;Hence what our system functionally is expected to do from users point of view is functional requirements. Once you understand what solution system offers to its users, it is easy to detail out these.&lt;/p&gt; &lt;h5 id=&quot;non-functional-requirements&quot;&gt;Non-functional requirements:&lt;/h5&gt; &lt;p&gt;What qualities we want in our system if we wish the business to succeed. As a part of these, we should consider the requirements that need to be examined carefully. Failure to meet this requirement would endanger the project’s business plan. Different system qualities are necessary to fulfill each such non-functional requirement.&lt;/p&gt; &lt;p&gt;While designing our system, we would be keeping these in mind and at the end we’ll assess how good our system is by measuring up against them.&lt;/p&gt; &lt;p&gt;Most of the time one has to make a trade off depending upon what attributes are needed in the system - Performance, Resilience, Availability, Consistency, Scalability, Reliability etc.&lt;/p&gt; &lt;h5 id=&quot;extended-requirements&quot;&gt;Extended Requirements:&lt;/h5&gt; &lt;p&gt;These might come from the interviewer as we build up our solution, as an extension of the problem or we can also add these if it will be a nice-to-have feature.&lt;/p&gt; &lt;h5 id=&quot;section-2-capacity-quick-look-sheet&quot;&gt;Section 2. Capacity, Quick look sheet:&lt;/h5&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/capacityTable.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/capacityTable.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/capacityTable.jpg&quot; alt=&quot;Capacity requirment of System Design&quot; /&gt; &lt;/picture&gt; &lt;p&gt;Getting to know the system’s scale is an important point of its design. Just like you consider the maximum size of input list of data in a programming problem, for system design you also take input requests and your system load handling into consideration.&lt;/p&gt; &lt;p&gt;If the measurements of the system are very large in number, then they are high scale systems. So we will try to assess our system based on the following -&lt;/p&gt; &lt;div class=&quot;vidWrapper&quot;&gt; &lt;video style=&quot;max-width:100%&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt; &lt;source src=&quot;/img/BBT-DC.mp4&quot; type=&quot;video/mp4&quot; /&gt; Your browser does not support the video tag. &lt;/video&gt; &lt;/div&gt; &lt;p&gt;&lt;em&gt;That’s the right acronym for capacity needs - BBT-DC (Big Bang Theory - Dr. Cooper)&lt;/em&gt;&lt;/p&gt; &lt;h5 id=&quot;behaviour-estimation-1&quot;&gt;Behaviour estimation&lt;/h5&gt; &lt;p&gt;We should try to understand whether our system will be read-heavy or write-heavy. What kind of a ratio is going to be there between read / writes? This will help us in choosing the right distribution, cache and database for our system.&lt;/p&gt; &lt;p&gt;We have categorized various systems based on their content type and size of service (or you many call questions) in limited set of buckets, which then makes it easy to cross apply the concepts from each other.&lt;/p&gt; &lt;p&gt;Content Type based categorization of System Design (System Design cheat sheet):&lt;/p&gt; &lt;h6 style=&quot;display=none;&quot; id=&quot;img-for-content&quot;&gt;&lt;/h6&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/ContentType.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/ContentType.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/ContentType.jpg&quot; alt=&quot;Content Type based categorization of System Design&quot; /&gt; &lt;/picture&gt; &lt;h5 id=&quot;traffic-estimation-1&quot;&gt;Traffic estimation&lt;/h5&gt; &lt;p&gt;This means how many read and write requests we are going to get per second / per month. We need to devise numbers of the same in order to get the storage and memory requirements later on.&lt;/p&gt; &lt;p&gt;You can refer to the below sheet for quickly estimating the MAU/DAU for your service. Chart for DAU/MAU (System Design cheat sheet):&lt;/p&gt; &lt;h6 style=&quot;display=none;&quot; id=&quot;img-for-dau&quot;&gt;&lt;/h6&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/DAU.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/DAU.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/DAU.jpg&quot; alt=&quot;Quick look chart for Daily Active Users&quot; /&gt; &lt;/picture&gt; &lt;h5 id=&quot;data-storage-estimation-1&quot;&gt;Data storage estimation&lt;/h5&gt; &lt;p&gt;We would also need to identify how much data we would need to store for a duration of in case our business runs for X years. For that we would use an average of per month required capacities once gathered.&lt;/p&gt; &lt;h6 style=&quot;display=none;&quot; id=&quot;img-for-dawu&quot;&gt;&lt;/h6&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/DAWU.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/DAWU.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/DAWU.jpg&quot; alt=&quot;Number of writes per user per second&quot; /&gt; &lt;/picture&gt; &lt;h5 id=&quot;bandwidth-estimation-1&quot;&gt;Bandwidth estimation&lt;/h5&gt; &lt;p&gt;Once we have the Inbound / Outbound requests number in place, we need to take an average on how much bandwidth we would need based on the average request size vs average response size.&lt;/p&gt; &lt;h5 id=&quot;cache-memory-estimation-1&quot;&gt;Cache memory estimation&lt;/h5&gt; &lt;p&gt;In case, we would like to cache some of the responses to be served be it on-demand OR pre-emptively what is the memory size, we expect to be used for a cache? We would likely be using 80-20 rule for estimation of caching for this.&lt;/p&gt; &lt;h6 id=&quot;what-is-the-80-20-rule&quot;&gt;What Is the 80-20 Rule?&lt;/h6&gt; &lt;p&gt;The 80-20 rule, also known as the Pareto Principle, asserts that 80% of outcomes (or outputs) result from 20% of all causes (or inputs) for any given event. In business, a goal of the 80-20 rule is to identify inputs that are potentially the most productive and make them the priority.&lt;/p&gt; &lt;h3 id=&quot;sneak-peak-to-next-article&quot;&gt;Sneak peak to next article&lt;/h3&gt; &lt;p&gt;Till now you have already witnessed a new way to look at system design problems. We have further lectures and stories to share, the below chart allows for figuring out the latency in the system super quickly.&lt;/p&gt; &lt;h6 style=&quot;display=none;&quot; id=&quot;img-for-latency&quot;&gt;&lt;/h6&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/Latency.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/Latency.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/Latency.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;p&gt;You could also &lt;a href=&quot;https://vg562vdcmzh.typeform.com/to/Yf5RxIbw&quot;&gt;sign-up&lt;/a&gt; for limited free seats in our premium system design class taught by experienced software architects.&lt;/p&gt; &lt;p&gt;STAY TUNED.&lt;/p&gt;</content><author><name>admin</name></author><category term="System Design"/><category term="Programming"/><category term="Interviews"/><category term="featured"/><summary type="html">Dreaded night before the interview</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techmunching.com/photo-1614439007888-c8f7ae337eb1"/><media:content medium="image" url="https://techmunching.com/photo-1614439007888-c8f7ae337eb1" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">What is DNS? A crash course on DNS for every developer</title><link href="https://techmunching.com/dns-all-explained/" rel="alternate" type="text/html" title="What is DNS? A crash course on DNS for every developer"/><published>2021-03-21T00:00:00+00:00</published><updated>2021-03-21T00:00:00+00:00</updated><id>https://techmunching.com/dns-all-explained</id><content type="html" xml:base="https://techmunching.com/dns-all-explained/">&lt;p&gt;Did you ever think who understands google.com when you type that in your address bar? 🤔&lt;/p&gt; &lt;p&gt;How does this magic happen? ✨ There isn’t a delivery boy to hand over an HTML page directly. Let’s understand the crux of this superfast procedure 🚀 starting from typing a URL address to getting a page in your browser. 💻 &lt;/p&gt; &lt;p&gt;If you ever need to set up a blog or website, this is a must-know article that contains all the understanding of DNS, the lookup process, types of DNS records i.e. all you need to know explained within a single article.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/0_CbBTtDG7nDVQVsE3.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/0_CbBTtDG7nDVQVsE3.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/0_CbBTtDG7nDVQVsE3.jpg&quot; alt=&quot;DNS is internet's phonebook library&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;DNS is internet’s phonebook library&lt;/em&gt;&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;What is DNS?&lt;/li&gt; &lt;li&gt;Why is it required?&lt;/li&gt; &lt;li&gt;Types of DNS servers&lt;/li&gt; &lt;li&gt;How DNS resolution takes place via DNS servers?&lt;/li&gt; &lt;li&gt;Types of DNS Query&lt;/li&gt; &lt;li&gt;What is DNS caching? Where is it cached?&lt;/li&gt; &lt;li&gt;DNS Record Types and Bonus cheatsheet&lt;/li&gt; &lt;li&gt;Issues and Concerns&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;what-is-dns&quot;&gt;What is DNS?&lt;/h3&gt; &lt;p&gt;DNS stands out for “&lt;strong&gt;Domain Name System&lt;/strong&gt;” which translates human-readable domain names (for example, &lt;em&gt;www.amazon.com&lt;/em&gt;) to machine-readable IP addresses (for example, &lt;em&gt;192.0.2.44&lt;/em&gt;). DNS system is a public, hierarchical, distributed, and heavily cached database.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;DNS is like the Internet’s own phonebook. Records are searched in order to identify the IP address associated with a particular name&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;An &lt;strong&gt;IP address&lt;/strong&gt; is that &lt;strong&gt;unique&lt;/strong&gt; address by which that server gets identified device on the internet (or on a local network). Once our computer/device has the IP address then we actually connect to the concerned website’s server.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_fSNP08gBc6O2-LnBjz3Bfw.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_fSNP08gBc6O2-LnBjz3Bfw.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_fSNP08gBc6O2-LnBjz3Bfw.jpg&quot; alt=&quot;DNS server&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Figure 1: &lt;strong&gt;DNS server&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Thus DNS resolution of a website’s address involves a lookup process which is the DNS lookup.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;why-it-is-required&quot;&gt;Why it is required?&lt;/h3&gt; &lt;p&gt;The domain name system (DNS) does the job of enabling a connection, for example to a website, without users having to know the corresponding IP.&lt;/p&gt; &lt;p&gt;Simple isn’t it? 😊&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;types-of-dnsservers&quot;&gt;Types of DNS Servers&lt;/h3&gt; &lt;h4 id=&quot;1-root-nameserver&quot;&gt;1. Root Name Server&lt;/h4&gt; &lt;p&gt;DNS root nameservers are known to every recursive resolver based on the extension of that domain (&lt;em&gt;.com&lt;/em&gt;, &lt;em&gt;.net&lt;/em&gt;, &lt;em&gt;.org&lt;/em&gt;, etc.) and a request is further assigned to a particular TLD responsible for such extension.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The root nameservers are overseen by a nonprofit called the Internet Corporation for Assigned Names and Numbers (&lt;strong&gt;ICANN&lt;/strong&gt;).&lt;/p&gt; &lt;/blockquote&gt; &lt;h4 id=&quot;2-tld-nameserver&quot;&gt;2. TLD Name Server&lt;/h4&gt; &lt;p&gt;A TLD nameserver maintains information for all the domain names that share a common domain extension, such as .com, .net&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Management of TLD nameservers is handled by the Internet Assigned Numbers Authority (&lt;strong&gt;IANA&lt;/strong&gt;), which is a branch of ICANN. &lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;The IANA breaks up the TLD servers into two main groups:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Generic top-level domains &lt;/strong&gt;-  domains that are not country-specific such as &lt;em&gt;.com&lt;/em&gt;, &lt;em&gt;.org&lt;/em&gt;, &lt;em&gt;.net&lt;/em&gt;, &lt;em&gt;.edu&lt;/em&gt;, and &lt;em&gt;.gov&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Country code top-level domains&lt;/strong&gt; - any domains that are specific to a country or state such as &lt;em&gt;.uk&lt;/em&gt; , &lt;em&gt;.us&lt;/em&gt;, &lt;em&gt;.ru&lt;/em&gt;, and &lt;em&gt;.jp&lt;/em&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h4 id=&quot;3-authoritative-nameserver&quot;&gt;3. Authoritative Name Server&lt;/h4&gt; &lt;p&gt;When a recursive resolver receives a response from a TLD nameserver, that response will direct the resolver to an authoritative nameserver. The authoritative nameserver is usually the resolver’s last step in the journey for an IP address.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;how-dns-resolution-takes-place-via-dns-servers-️&quot;&gt;How DNS resolution takes place via DNS servers ⚙️ ?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; When you enter a URL into your browser, it starts searching for the corresponding IP-address in your computer’s DNS cache. If it finds no information there, the request will be redirected until the IP address will be identified. &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Then it passes the local DNS-Server (usually your internet router), the ISP(Internet service provider) DNS-Server, and the root name server, which is accountable for the respective Top Level Domain (&lt;strong&gt;TLD&lt;/strong&gt;). &lt;/p&gt; &lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; If there is still no information found, the request will be sent to the Network Information Center (&lt;strong&gt;NIC&lt;/strong&gt;) responsible for the zone. In the case of the TLD &lt;em&gt;“.com”&lt;/em&gt;, this is Verisign.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; The NIC’s server will send the address of the zone’s authoritative nameserver to the ISP. The ISP will then ask this authoritative server for the IP, and send the information through your router back to your browser. That way the website can be accessed.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_LbOZIL34bKbaeaEeKijCLA.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_LbOZIL34bKbaeaEeKijCLA.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_LbOZIL34bKbaeaEeKijCLA.jpg&quot; alt=&quot;DNS Query resolution&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Figure 2: &lt;strong&gt;DNS Query Resolution&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;types-of-dnsquery&quot;&gt;Types of DNS Query&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Recursive&lt;/li&gt; &lt;li&gt;Iterative&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A typical uncached DNS lookup will involve both recursive and iterative queries. Here, in figure 2- &lt;/p&gt; &lt;ol&gt; &lt;li&gt;Query no. 2 to 7 are iteratively performed by the from ISP-Local DNS a.k.a recursive resolver.&lt;/li&gt; &lt;li&gt;DNS query after 1 is recursively performed by the recursive resolver (from the browser point of view)&lt;/li&gt; &lt;/ol&gt; &lt;blockquote&gt; &lt;p&gt;A typical uncached DNS lookup will involve both recursive and iterative queries.&lt;/p&gt; &lt;/blockquote&gt; &lt;hr /&gt; &lt;h3 id=&quot;what-is-dns-caching-where-is-itcached&quot;&gt;What is DNS caching? Where is it cached?&lt;/h3&gt; &lt;p&gt;The purpose of caching is to serve the last stored record for improvements in &lt;strong&gt;performance&lt;/strong&gt; and &lt;strong&gt;reliability&lt;/strong&gt; for future requests. &lt;/p&gt; &lt;p&gt;DNS caching involves storing data closer to the requesting client so that the DNS query can be resolved earlier and additional queries further down the DNS lookup chain can be avoided, thereby improving load times and reducing bandwidth/CPU consumption. DNS data can be cached in a variety of locations, each of which will store DNS records for a set amount of time determined by a time-to-live (&lt;strong&gt;TTL&lt;/strong&gt;).&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;At each level, caching takes place for the fetched records using TTL and other possible cache refreshment algorithms.&lt;/p&gt; &lt;/blockquote&gt; &lt;h4 id=&quot;1-browserlevel&quot;&gt;1. Browser level&lt;/h4&gt; &lt;p&gt;Moderns web browsers can do that. For e.g. you can check in chrome at - &lt;em&gt;chrome://net-internals/#dns&lt;/em&gt;&lt;/p&gt; &lt;h4 id=&quot;2-oslevel&quot;&gt;2. OS level&lt;/h4&gt; &lt;p&gt;The operating system level DNS resolver is the second and last local stop before a DNS query leaves your machine. The process inside your operating system that is designed to handle this query is commonly called a “stub resolver” or DNS client.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;dns-recordtypes&quot;&gt;DNS Record Types&lt;/h3&gt; &lt;p&gt;When you register a domain, you can set many types of DNS records. Each record has a Type, a Host, and a Value - &lt;/p&gt; &lt;ul&gt; &lt;li&gt;“&lt;strong&gt;Types&lt;/strong&gt;” are predefined&lt;/li&gt; &lt;li&gt;“&lt;strong&gt;Host&lt;/strong&gt;” represents the root (&lt;em&gt;@&lt;/em&gt;) or a subdomain (&lt;em&gt;www&lt;/em&gt;)&lt;/li&gt; &lt;li&gt;“&lt;strong&gt;Value&lt;/strong&gt;” is an IP or web address, or some other value.&lt;/li&gt; &lt;/ul&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Address Mapping record (A Record)&lt;/strong&gt; - maps a hostname to the corresponding IPv4 address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;IP Version 6 Address record (AAAA Record)&lt;/strong&gt; - maps a hostname to the corresponding IPv6 address.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Canonical Name record (CNAME Record)&lt;/strong&gt; - alias a hostname to another hostname. If a record that contains a CNAME points to another hostname, the DNS resolution is repeated with the new hostname. Once you define a &lt;em&gt;CNAME&lt;/em&gt; record for a subdomain (host), you CAN’T DEFINE another record for that same subdomain. Because of this, you can’t use &lt;em&gt;CNAME&lt;/em&gt; at the root level (where you need other records to exist)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Alias Name Record (ANAME Record)&lt;/strong&gt; - An &lt;em&gt;ANAME&lt;/em&gt; record is like a &lt;em&gt;CNAME&lt;/em&gt; record but at the root of your domain. That means you can point the “naked” version of your domain (like example.com ) to a hostname (like mycdn.com).  &lt;strong&gt;This is like a virtual CNAME and a non-standard DNS record&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mail eXchanger record (MX Record)&lt;/strong&gt; - specifies an SMTP email server for the domain.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Name Server records (NS Record)&lt;/strong&gt; - specifies that a DNS Zone, such as “&lt;em&gt;hello.com&lt;/em&gt;” is delegated to a specific Authoritative Name Server, and provides the address of the name server.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Reverse-lookup Pointer records (PTR Record)&lt;/strong&gt; - allows a DNS resolver to provide an IP address and receive a hostname (reverse DNS lookup).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Certificate record (CERT Record)&lt;/strong&gt; - stores encryption certificates such as PKIX, SPKI, PGP, and so on.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Service Location (SRV Record)&lt;/strong&gt; - a service location record, like MX but for other communication protocols.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Text Record (TXT Record) &lt;/strong&gt;- typically carries machine-readable data such as opportunistic encryption, sender policy framework, etc.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start of Authority (SOA Record)&lt;/strong&gt; - this record appears at the beginning of a DNS zone file, and indicates the Authoritative Name Server for the current DNS zone, contact details for the domain administrator, domain serial number, etc.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;bonus-cheatsheet-&quot;&gt;Bonus cheatsheet 🎉&lt;/h3&gt; &lt;p&gt;Here is a bonus cheat sheet for all the important records for you to remember.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_EsgHQALk21bxbCPQKXY44g.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_EsgHQALk21bxbCPQKXY44g.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_EsgHQALk21bxbCPQKXY44g.jpg&quot; alt=&quot;DNS Query resolution&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Figure 3: &lt;strong&gt;A cheat sheet for important DNS records&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;issues-and-concerns&quot;&gt;Issues and Concerns 🐛&lt;/h3&gt; &lt;p&gt;DNS cache poisoning is the act of entering false information into a DNS cache so that DNS queries return an incorrect response and users are directed to the wrong websites. DNS cache poisoning is also known as ‘DNS spoofing.’ &lt;/p&gt; &lt;p&gt;IP addresses are the ‘room numbers’ of the Internet, enabling web traffic to arrive in the right places. DNS resolver caches are the ‘campus directory,’ and when they store faulty information, traffic goes to the wrong places until the cached information is corrected.&lt;/p&gt; &lt;p&gt;Because there is typically no way for DNS resolvers to verify the data in their caches, incorrect DNS information remains in the cache until the &lt;strong&gt;TTL&lt;/strong&gt; expires, or until it is removed manually. &lt;/p&gt; &lt;p&gt;A more secure DNS protocol called &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions&quot; target=&quot;_blank&quot;&gt;DNSSEC&lt;/a&gt; aims to solve some of these problems, but it has not been widely adopted yet.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/learning/dns/what-is-dns/&quot; target=&quot;_blank&quot;&gt;Cloudflare - what is DNS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.seobility.net/en/wiki/DNS_Server&quot; target=&quot;_blank&quot;&gt;Seobility - DNS records and types&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;p&gt;Thanks for reading this article! Feel free to leave your comments and let us know what you think. Please feel free to drop any comments to improve this article.&lt;/p&gt; &lt;p&gt;Please check out our &lt;a href=&quot;https://techmunching.com&quot;&gt;other articles&lt;/a&gt; and &lt;a href=&quot;https://techmunching.com&quot;&gt;website&lt;/a&gt;, Have a great day!&lt;/p&gt;</content><author><name>admin</name></author><category term="Programming"/><category term="Web"/><category term="Networking"/><summary type="html">Did you ever think who understands google.com when you type that in your address bar? 🤔</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techmunching.com/0_CbBTtDG7nDVQVsE3"/><media:content medium="image" url="https://techmunching.com/0_CbBTtDG7nDVQVsE3" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to write an LRU cache: Master it in any programming language</title><link href="https://techmunching.com/lru-cache/" rel="alternate" type="text/html" title="How to write an LRU cache: Master it in any programming language"/><published>2021-02-20T00:00:00+00:00</published><updated>2021-02-20T00:00:00+00:00</updated><id>https://techmunching.com/lru-cache</id><content type="html" xml:base="https://techmunching.com/lru-cache/">&lt;p&gt;From an algorithm, data structure and interview’s perspective, caching makes for a versatile topic. It can be used to gauge someone’s low-level understanding of data structures and algorithms. It can also be turned around to challenge one’s high-level comprehension of distributed systems. Among caches, LRU is perhaps most widely used and accepted. We promise, after reading this post, you should be able to write one in your sleep.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/Dsa6TcAVAAEUcTw.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/Dsa6TcAVAAEUcTw.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/Dsa6TcAVAAEUcTw.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Cache in your wardrobe&lt;/em&gt;&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Introduction, what’s a cache really?&lt;/li&gt; &lt;li&gt;What’s a Least Recently Used (LRU) Cache?&lt;/li&gt; &lt;li&gt;Applications in System Design&lt;/li&gt; &lt;li&gt;How to Build it in any programming language&lt;/li&gt; &lt;li&gt;Building blocks&lt;/li&gt; &lt;li&gt;Putting it all together&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt; &lt;p&gt;Caches are a type of data storage device that typically stores data in memory for fast retrieval. They are generally implemented as a key-value store, meaning you store and access the data via an identifying key of some sort. The RAM on your computer is an example of a cache.&lt;/p&gt; &lt;p&gt;The operating system stores data in RAM for faster access than the hard drive, and it uses the address of the memory cell as the key. Since it’s expensive, its usage has to be highly optimized!&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;One such way is to use the Least Recently Used (LRU) Cache Algorithm also known as one of the Page Replacement Algorithms. It maintains the things that need to be stored in cache and which are to be thrown out.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;For e.g. -&lt;/p&gt; &lt;ol&gt; &lt;li&gt;A processor cache is used to read data faster from main memory (RAM).&lt;/li&gt; &lt;li&gt;Cache in RAM can be used to store part of disk data in RAM and serve future requests faster.&lt;/li&gt; &lt;li&gt;Network responses can be cached in RAM to avoid too many network calls.&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;whats-a-least-recently-used-lru-cache&quot;&gt;What’s a Least Recently Used (LRU) Cache?&lt;/h3&gt; &lt;p&gt;LRU caches are a specific type of cache with a unique feature. When an LRU cache runs out of space and needs to remove data, it will evict the key-value pair that was least recently fetched from the cache, thus it defines the policy to evict elements from the cache to make room for new elements when the cache becomes full.&lt;/p&gt; &lt;h4 id=&quot;lets-understand-this-with-an-example&quot;&gt;Let’s understand this with an example:&lt;/h4&gt; &lt;p&gt;When you are working on a part of a coding project, you would be opening some specific files, say like project.cpp, project1.cpp, again and again. This means if you were earlier playing some game, the files of that game are no longer used frequently.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/12_12_UnifiedBufferCache.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/12_12_UnifiedBufferCache.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/12_12_UnifiedBufferCache.jpg&quot; alt=&quot;File System Cache&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;File System Caching&lt;/em&gt;&lt;/p&gt; &lt;p&gt;LRU Cache gives priority to those files which are used more frequently. The files that are used rarely are removed and those which are used frequently are stored. The least recently used file is removed when any new file is used.&lt;/p&gt; &lt;p&gt;Popular open source examples of LRU caches are &lt;em&gt;Redis&lt;/em&gt; and &lt;em&gt;Memcached&lt;/em&gt;.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;applications-in-system-design&quot;&gt;Applications in System Design&lt;/h3&gt; &lt;blockquote&gt; &lt;p&gt;Slow or under-performing websites can result in millions in lost revenue, Querying databases, especially when they contain a lot of data, can be quite slow.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Unfortunately, many of the same systems that rely on high uptime also have to store mountains of data. This is often the case for social media and e-commerce sites. These sites store their data in a database of some sort, be it SQL or NoSQL. While this is standard practice, the problem comes when you need to fetch that data.&lt;/p&gt; &lt;p&gt;Enter the cache…&lt;/p&gt; &lt;p&gt;Since caches keep data in memory, they are much more performant than traditional databases. And for social media sites, where 20% of the most popular content drives 80% of the traffic, caching can dramatically decrease the load on the databases.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_1KVhvYNodqDcOPwqJx89_g.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_1KVhvYNodqDcOPwqJx89_g.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_1KVhvYNodqDcOPwqJx89_g.jpg&quot; alt=&quot;SQL vs. cache speed comparison &quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;SQL vs. cache speed comparison (Image Credit: Dzone)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The next time an interviewer asks you how to optimize an API endpoint or workflow that requires fetching the same data over and over, caching is a good place to start. Knowing how to build one yourself is the hard part and that’s exactly what we’ll be focusing on.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;how-to-build-it-in-any-programming-language&quot;&gt;How to Build it in any programming language&lt;/h3&gt; &lt;h4 id=&quot;requirements-&quot;&gt;Requirements ??&lt;/h4&gt; &lt;p&gt;The first will be the API. Which methods do we need to implement? While production quality caches are feature rich, we’ll keep it simple. You’ll only need to create two methods:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;em&gt;get(key)&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;em&gt;set(key, value)&lt;/em&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The LRU cache itself has following functional requirements:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;When the max size is reached, remove the least recently used key.&lt;/li&gt; &lt;li&gt;Whenever a key is fetched / updated, it is most recently used.&lt;/li&gt; &lt;li&gt;Both get and set operations must complete in O(1) time complexity&lt;/li&gt; &lt;/ol&gt; &lt;blockquote&gt; &lt;p&gt;No matter how large the cache is, it takes the same amount of time to complete&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;With these requirements in mind, we can get to work.&lt;/p&gt; &lt;h4 id=&quot;data-structure&quot;&gt;Data structure&lt;/h4&gt; &lt;p&gt;Cache and O(1) means we need a map / dictionary kind of thing but that isn’t all. To keep track of order we must have order as well so we would have to a list kind of a thing as well. Thus, to implement an LRU cache we use two data structures: a hashmap and a doubly linked list. A doubly linked list helps in maintaining the eviction order and a hashmap helps with O(1) lookup of cached keys. Here goes the algorithm for LRU cache.&lt;/p&gt; &lt;h4 id=&quot;pseudocode-for-lru-cache&quot;&gt;Pseudocode for LRU cache&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;If the element exists in hashmap move the element to the the start Else if cache is already full Remove the last element from list and delete its hashmap entry Add the new element at the start of list and in hashmap as well Get from Cache and Return &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that list is used to keep track of the most recently accessed elements. The element at the start here of the doubly linked list is the most recently accessed element.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/lru-1.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/lru-1.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/lru-1.jpg&quot; alt=&quot;LRU Cache Sample iterations&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;LRU Cache Sample iterations&lt;/em&gt;&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;building-blocks&quot;&gt;Building blocks&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Doubly Linked List =&amp;gt; For C++ code, we’ll use &lt;code&gt;std::&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Hashmap =&amp;gt; For C++ code, we’ll use &lt;code&gt;std::&amp;lt;unordered_map&amp;gt;&lt;/code&gt;&lt;/li&gt; &lt;li&gt;API to handle cache size overflow&lt;/li&gt; &lt;li&gt;API to handle move element to start&lt;/li&gt; &lt;li&gt;APIs to Get and Set the actual data.&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt; &lt;p&gt;Here’s the final code for LRU cache. First let’s just write the class structure -&lt;/p&gt; &lt;h4 id=&quot;block-1--2-a-class-that-uses-hashmap-doubly-linked-list&quot;&gt;Block 1 &amp;amp; 2: A class that uses Hashmap, Doubly Linked List&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;lt;unordered_map&amp;gt; template &amp;lt; typename keyT, typename valueT &amp;gt; class LRUCache { public: // typedef complicated datatypes for ease of reading the code using Pair = std::pair&amp;lt;keyT, valueT&amp;gt;; using ListIterator = std::list&amp;lt;std::pair&amp;lt;keyT, valueT&amp;gt;&amp;gt;::iterator; LRUCache(size_t maxSize) noexcept: _maxSize(maxSize) {} public: // .... Methods private: // ... Methods std::list &amp;lt; Pair &amp;gt; _keyValuePairList; std::unordered_map &amp;lt; keyT, ListIterator &amp;gt; _cacheMap; size_t _maxSize; }; &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;block-3-handle-cache-size-overflow-and-element-movement&quot;&gt;Block 3: Handle cache size overflow and element movement&lt;/h4&gt; &lt;p&gt;Let’s write some helper functions, that will go in private mode -&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; private: void moveToStart(ListIterator &amp;amp; iterator) { _keyValuePairList.splice(_keyValuePairList.begin(), _keyValuePairList, iterator); } void checkCacheSize() { if (_maxSize &amp;gt; 0 &amp;amp;&amp;amp; _keyValuePairList.size() &amp;gt; _maxSize) { _cacheMap.erase(_keyValuePairList.back().first); _keyValuePairList.pop_back(); } } &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;block-4a-set-api-for-key-and-value&quot;&gt;Block 4a: Set API for key and value&lt;/h4&gt; &lt;p&gt;Now, let’s implement the public APIs for this class, first one would the set -&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; // move version of setting key, value. We can use emplace_front to directly // transfer these objects to the list. void set(keyT &amp;amp;&amp;amp; key, valueT &amp;amp;&amp;amp; value) { if (_cacheMap.find(key) != _cacheMap.end()) { // if the key already exist then update the value in the list using // iterator from map and move the key, value pair to front to delay // eviction. _cacheMap[key] -&amp;gt; second = value; moveToStart(_cacheMap[key]); } else { // if this is a new key then add it to the map and also to the list. _keyValuePairList.emplace_front(key, value); _cacheMap[key] = _keyValuePairList.begin(); } // check for size of cache. checkCacheSize(); } void set(const keyT &amp;amp; key, const valueT &amp;amp; value) { if (_cacheMap.find(key) != _cacheMap.end()) { _cacheMap[key] -&amp;gt; second = value; moveToStart(_cacheMap[key]); } else { _keyValuePairList.push_front({ key, value }); _cacheMap[key] = _keyValuePairList.begin(); } checkCacheSize(); } &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;block-4b-get-api-and-element-checking&quot;&gt;Block 4b: Get API and element checking&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; const valueT &amp;amp; get(const keyT &amp;amp; key) { if (!exists(key)) throw std::range_error(&quot;Key not present&quot;); // Move this item to the front of the list to delay eviction. moveToStart(_cacheMap[key]); return _cacheMap[key] -&amp;gt; second; } bool exists(const keyT &amp;amp; key) const { return _cacheMap.find(key) != _cacheMap.end(); } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;That’s it, we’re done. Yay!! We hope you found this deep dive into LRU caches useful and informative, now you’ll be able to build one in your sleep.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/redis-vs-mysql-benchmarks&quot;&gt;https://dzone.com/articles/redis-vs-mysql-benchmarks&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://course.ece.cmu.edu/~ece447/s15/lib/exe/fetch.php?media=onur-447-spring15-lecture18-caches-afterlecture.pdf&quot;&gt;https://course.ece.cmu.edu/~ece447/s15/lib/exe/fetch.php?media=onur-447-spring15-lecture18-caches-afterlecture.pdf&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/2504178/lru-cache-design&quot;&gt;https://stackoverflow.com/questions/2504178/lru-cache-design&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;p&gt;Thanks for reading this article! Feel free to leave your comments and let me know what you think. Please feel free to drop any comments to improve this article.&lt;/p&gt; &lt;p&gt;Please check out our &lt;a href=&quot;https://techmunching.com&quot;&gt;other articles&lt;/a&gt; and &lt;a href=&quot;https://techmunching.com&quot;&gt;website&lt;/a&gt;, Have a great day!&lt;/p&gt;</content><author><name>admin</name></author><category term="C++"/><summary type="html">From an algorithm, data structure and interview’s perspective, caching makes for a versatile topic. It can be used to gauge someone’s low-level understanding of data structures and algorithms. It can also be turned around to challenge one’s high-level comprehension of distributed systems. Among caches, LRU is perhaps most widely used and accepted. We promise, after reading this post, you should be able to write one in your sleep.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techmunching.com/Dsa6TcAVAAEUcTw"/><media:content medium="image" url="https://techmunching.com/Dsa6TcAVAAEUcTw" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">No more dealing with slow MacBookPro</title><link href="https://techmunching.com/No-more-dealing-with-slow-MacBookPro/" rel="alternate" type="text/html" title="No more dealing with slow MacBookPro"/><published>2021-01-28T00:00:00+00:00</published><updated>2021-01-28T00:00:00+00:00</updated><id>https://techmunching.com/No-more-dealing-with-slow-MacBookPro</id><content type="html" xml:base="https://techmunching.com/No-more-dealing-with-slow-MacBookPro/">&lt;h1 id=&quot;heres-another-macbookpro-101-for-you&quot;&gt;Here’s another MacBookPro 101 for you!!&lt;/h1&gt; &lt;div class=&quot;vidWrapper&quot;&gt; &lt;video style=&quot;max-width:100%&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt; &lt;source src=&quot;/img/throttle_1.mp4&quot; type=&quot;video/mp4&quot; /&gt; Your browser does not support the video tag. &lt;/video&gt; &lt;/div&gt; &lt;p&gt;Has it ever happened with you that you are all set to rock the virtual meeting with your presentation and just before sharing your MacBook’s screen, it froze? Not your heart but the Laptop, the trackpad isn’t anymore in control of the cursor, the fan is on full throttle, yet everything is all slowed down.&lt;/p&gt; &lt;p&gt;It’s not a hidden fact now that Apple throttles the CPU when your MacBook heats up. While this would have been a bearable scenario if heating up wasn’t necessarily an often scenario, but enough applications are running on our system to beat the shit out of it. This is even more common for my fellow developer friends.&lt;/p&gt; &lt;p&gt;Well, a good way out people might suggest to this would be to buy an M1 Chip MacBook Pro, if you can afford that it might be best to stop reading this blog further and visit a nearby apple store. However, if you have recently bought a MacBook Pro wouldn’t necessarily want to do that, please keep reading.&lt;/p&gt; &lt;p&gt;I suggest using the Macs Fan Control (http://crystalidea.com/macs-fan-control) application on your MacBook. This helps you control the fan speed without tying it with the current temperature.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Install the application.&lt;/li&gt; &lt;li&gt;Right-click on MacsFanControl in TaskBar&lt;/li&gt; &lt;li&gt;Select Full Blast&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Here is what I suggest - Turn on the fan to full throttle and let your fan always work at full speed. This hack has allowed me to stay at peace and not worry about being slowed down in the best of moments.&lt;/p&gt; &lt;p&gt;Here is the snapshot of the settings your need to opt for:&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/throttle_2.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/throttle_2.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/throttle_2.jpg&quot; alt=&quot;No more dealing with slow MacBookPro&quot; /&gt; &lt;/picture&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/throttle_3.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/throttle_3.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/throttle_3.jpg&quot; alt=&quot;Turn on the fan to full throttle&quot; /&gt; &lt;/picture&gt; &lt;p&gt;I hope it helps my fellow mates.!&lt;/p&gt; &lt;p&gt;Please consider commenting on the post below what else would you like to read on our blog. We make weekly blogs about tech and more.&lt;/p&gt;</content><author><name>admin</name></author><category term="Productivity"/><summary type="html">Here’s another MacBookPro 101 for you!!</summary></entry><entry><title type="html">Largest sub matrix rectangle with rearrangement with all 1s</title><link href="https://techmunching.com/Largest-sub-matrix-rectangle-with-rearrangement-with-all-1s/" rel="alternate" type="text/html" title="Largest sub matrix rectangle with rearrangement with all 1s"/><published>2021-01-17T00:00:00+00:00</published><updated>2021-01-17T00:00:00+00:00</updated><id>https://techmunching.com/Largest-sub-matrix-rectangle-with-rearrangement-with-all-1s</id><content type="html" xml:base="https://techmunching.com/Largest-sub-matrix-rectangle-with-rearrangement-with-all-1s/">&lt;p&gt;We at Tech Munching provide you the cleanest, easy to understand solutions to difficult competitive coding questions. This question #1727 appeared in LeetCode contest #224.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/bricks.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/bricks.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/bricks.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;hr /&gt; &lt;p&gt;&lt;em&gt;Here is the question:&lt;/em&gt;&lt;/p&gt; &lt;p&gt;You are given a binary matrix &lt;code&gt;matrix&lt;/code&gt; of size &lt;code&gt;m x n&lt;/code&gt;, and you are allowed to rearrange the &lt;strong&gt;columns&lt;/strong&gt; of the &lt;code&gt;matrix&lt;/code&gt; in any order.&lt;/p&gt; &lt;p&gt;Return &lt;em&gt;the area of the largest submatrix within&lt;/em&gt; &lt;code&gt;matrix&lt;/code&gt; &lt;em&gt;where &lt;strong&gt;every&lt;/strong&gt; element of the submatrix is&lt;/em&gt; &lt;code&gt;1&lt;/code&gt; &lt;em&gt;after reordering the columns optimally.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40536-pm.png&quot; alt=&quot;https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40536-pm.png&quot; /&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Input: matrix = [[0,0,1],[1,1,1],[1,0,1]] Output: 4 Explanation: You can rearrange the columns as shown above. The largest submatrix of 1s, in bold, has an area of 4. &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;p&gt;&lt;em&gt;Here is our proposed solution:&lt;/em&gt;&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Not to console the audience reading it after the contest, however, this wasn’t necessarily a &lt;code&gt;medium&lt;/code&gt; problem. &lt;em&gt;As with life, this problem also has multiple solutions to it&lt;/em&gt;. So, please comment down in case you would need further solutions based on DP or so.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Let’s try to look at the problem in a different way, can we think of &lt;code&gt;value 1&lt;/code&gt; as adding a floor to the building and &lt;code&gt;value 0&lt;/code&gt; as ground level of the building. Our task is to find the max rectangle with parallel buildings and because the columns can be rearranged, we can move the buildings.&lt;/p&gt; &lt;p&gt;Here are the height of the building for each row:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; &lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;Col 1&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;Col 2&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;Col 3&lt;/th&gt; &lt;th&gt; &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Row 1&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Row 2&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt; &lt;td&gt;(Previous floor adds up in coloumn 3)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Row 3&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt; &lt;td&gt;(Ground floor in coloumn 2 nullifies previous height)&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/200117-row3.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/200117-row3.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/200117-row3.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;p&gt;Since, we can actually move the coloumns, above rows after sorting can be represented as:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt; &lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;Col 1&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;Col 2&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;Col 3&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Row 1&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Row 2&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Row 3&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/200117-row31.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/200117-row31.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/200117-row31.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;p&gt;Once you reach this state, finding the max rectangles for each building is height * width.&lt;/p&gt; &lt;p&gt;For example:&lt;/p&gt; &lt;p&gt;Row 3 &amp;amp; Col 1 : 3 (height) * 1 (width)&lt;/p&gt; &lt;p&gt;Row 3 &amp;amp; Col 1 &amp;amp; Col 2 : 2 (height) * 2 (width)&lt;/p&gt; &lt;p&gt;Here is complete solution:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;class Solution { public: int largestSubmatrix(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) { if (matrix.empty()) return 0; vector&amp;lt;int&amp;gt; brickLevel (matrix[0].size(), 0); int answer = numeric_limits&amp;lt;int&amp;gt;::min(); for (auto i = 0; i &amp;lt; matrix.size(); i++) { for (auto j = 0; j &amp;lt; matrix[0].size(); j++) // set the brick value brickLevel[j] = matrix[i][j] == 0 ? 0 : brickLevel[j] + 1; // sort bricks to keep buildings consecutive auto mx = brickLevel; sort(mx.begin(), mx.end(), greater()); for (auto i = 0; i &amp;lt; mx.size(); i++) answer = max(answer, (i + 1) * mx[i]); } return answer; } }; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The time complexity for a matrix of &lt;code&gt;MxN&lt;/code&gt; will be &lt;code&gt;MNlog(N)&lt;/code&gt;. That’s easy to understand, the outer loop iterates M rows which iterates N columns and sort vector of length N which is &lt;code&gt;M * (N + Nlog(N))&lt;/code&gt;, which asymptotically is &lt;code&gt;MNlog(N)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Please feel free to comment down below in case you find any flaw or would need deeper understanding in any aspects.&lt;/p&gt; &lt;hr /&gt;</content><author><name>admin</name></author><category term="C++"/><category term="Algorithm"/><category term="Interview Preparation"/><summary type="html">We at Tech Munching provide you the cleanest, easy to understand solutions to difficult competitive coding questions. This question #1727 appeared in LeetCode contest #224.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techmunching.com/bricks"/><media:content medium="image" url="https://techmunching.com/bricks" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Lambdas and closures in C++</title><link href="https://techmunching.com/lambdas-and-closures-in-c/" rel="alternate" type="text/html" title="Lambdas and closures in C++"/><published>2020-10-27T00:00:00+00:00</published><updated>2020-10-27T00:00:00+00:00</updated><id>https://techmunching.com/lambdas-and-closures-in-c</id><content type="html" xml:base="https://techmunching.com/lambdas-and-closures-in-c/">&lt;p&gt;What are closures vs how lambdas are different from closures?&lt;/p&gt; &lt;div class=&quot;vidWrapper&quot;&gt; &lt;video style=&quot;max-width:100%&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt; &lt;source src=&quot;/img/0*PA8-5rLUUze-e0iK.mp4&quot; type=&quot;video/mp4&quot; /&gt; Your browser does not support the video tag. &lt;/video&gt; &lt;/div&gt; &lt;p&gt;&lt;em&gt;They look similar!!&lt;/em&gt;&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Just your everyday functions&lt;/li&gt; &lt;li&gt;Lambda Expressions&lt;/li&gt; &lt;li&gt;What are closures&lt;/li&gt; &lt;li&gt;Lambdas vs. Closures&lt;/li&gt; &lt;li&gt;Distinction by Examples&lt;/li&gt; &lt;li&gt;Close analog to a closure&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;just-your-everyday-functions&quot;&gt;Just your everyday functions&lt;/h3&gt; &lt;p&gt;When most people think of &lt;em&gt;functions&lt;/em&gt;, they think of &lt;strong&gt;named functions&lt;/strong&gt; such as -&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;std::string a_named_function () { return &quot;This string is returned from a named function&quot;; } // A named function &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These are called by name, of course:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;foo(); //returns the string above &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;h3 id=&quot;lambda-expressions&quot;&gt;Lambda Expressions&lt;/h3&gt; &lt;p&gt;The term “lambda” is short for &lt;em&gt;lambda expression&lt;/em&gt;, and a lambda is just that 😊:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lamdba expression&lt;/strong&gt; — An *expression *that specifies an anonymous function object.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lamdba function&lt;/strong&gt; — This term is used interchangeably with the term “lambda expression.”&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;As such, it exists only in a program’s source code.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;A lambda does not exist at runtime.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;A lambda expression &lt;strong&gt;specifies an object, not just a function without a name,&lt;/strong&gt; capable of capturing variables in scope.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Lambdas can frequently be passed around as objects.&lt;/li&gt; &lt;li&gt;A lambda is essentially a function object that is specified inline.&lt;/li&gt; &lt;li&gt;In addition to its own function parameters, a lambda expression can refer to local variables in the scope of its definition.&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h3 id=&quot;what-are-closures&quot;&gt;What are closures&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;* What is C++ specific part here&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;A closure is a general concept in programming that originated from functional programming. When we talk about the closures in C++, they always come with lambda expressions. &lt;br /&gt; In any other language like Python, closure are unrelated to Lambdas&lt;/em&gt; 😊&lt;/p&gt; &lt;p&gt;A &lt;strong&gt;&lt;em&gt;closure&lt;/em&gt;&lt;/strong&gt; is any function that &lt;strong&gt;&lt;em&gt;closes over&lt;/em&gt;&lt;/strong&gt; the &lt;strong&gt;&lt;em&gt;environment&lt;/em&gt;&lt;/strong&gt; in which it was defined. This means that it can access variables not in its parameter list.&lt;/p&gt; &lt;hr /&gt; &lt;h4 id=&quot;what-is-a-closure-anyway-in-c&quot;&gt;What is a Closure anyway in C++?&lt;/h4&gt; &lt;p&gt;A value* defined (rather encapsulated) by lambda expression that consists of both the code as well as the values of the variables referred to in the code.&lt;br /&gt; (We will discuss this asterisk * further in this article)&lt;/p&gt; &lt;p&gt;So closure is an anonymous function object that is created automatically by the compiler as the result of a lambda expression. A closure stores those variables from the scope of the definition of the lambda expression that is used in the lambda expression.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;The runtime effect of a lambda expression is the generation of an object. Such objects are known as &lt;em&gt;closures&lt;/em&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;A closure is a function that encloses its surrounding state by referencing fields external to its body. The enclosed state remains across invocations of the closure&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;lambdas-vs-closures&quot;&gt;Lambdas vs. Closures&lt;/h3&gt; &lt;p&gt;S&lt;strong&gt;cott Meyers&lt;/strong&gt; puts it beautifully — “&lt;strong&gt;The distinction between a lambda and the corresponding closure is precisely equivalent to the distinction between a class and an instance of the class&lt;/strong&gt;”.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Closures are to lambdas as objects are to classes.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;As we know, a class exists only in source code; it doesn’t exist at runtime. What exists at runtime are objects of the class type. Similarily -&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Each lambda expression causes a unique class to be generated (during compilation) and also causes an object of that class type–a closure–to be created (at runtime).&lt;/p&gt; &lt;/blockquote&gt; &lt;ol&gt; &lt;li&gt;Lambdas occupy no data memory at runtime, for example, though they may occupy code memory.&lt;/li&gt; &lt;li&gt;Closures occupy data memory, but not code memory.&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;distinction-by-examples&quot;&gt;Distinction by Examples&lt;/h3&gt; &lt;p&gt;Let’s take an example —&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;auto f = [&amp;amp;](int x, int y) { return fudgeFactor * (x + y); }; // the expression to the right of the &quot;=&quot; is the lambda expression (i.e., &quot;the lambda&quot;), // The runtime object created by that expression is the closure. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;f&lt;/code&gt; itself is not a closure, it is a &lt;strong&gt;&lt;em&gt;copy of the closure&lt;/em&gt;&lt;/strong&gt; 🥴&lt;/p&gt; &lt;h4 id=&quot;ok-what-do-you-mean&quot;&gt;&lt;strong&gt;Ok, what do you mean?&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;The process of copying the closure into f may be optimized into a move but that doesn’t change the fact that f itself is not the closure.&lt;/p&gt; &lt;p&gt;The actual closure object is a temporary that’s typically destroyed at the end of the statement unless you bind it to a &lt;a href=&quot;https://medium.com/pranayaggarwal25/universal-reference-perfect-forwarding-5664514cacf9&quot;&gt;forwarding reference(a.ka. Universal reference)&lt;/a&gt; or lvalue-reference-to-&lt;code&gt;const&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;//===============================================================// auto&amp;amp;&amp;amp; rrefToClosure = [&amp;amp;](int x, int y) { return fudgeFactor * (x + y); }; const auto&amp;amp; lrefToConstToClosure = [&amp;amp;](int x, int y) { return fudgeFactor * (x + y); }; //===============================================================// &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let’s take another example —&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;//===============================================================// std::function&amp;lt;void(void)&amp;gt; closureWrapper1() { int x = 10; return [&amp;amp;x](){ std::cout &amp;lt;&amp;lt; &quot;Value in the closure: &quot; &amp;lt;&amp;lt; x++ &amp;lt;&amp;lt; std::endl; }; } int main() { int x = 10; auto func0 = [&amp;amp;x](){x += 1; std::cout &amp;lt;&amp;lt; &quot;Value in the closure: &quot; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;}; func0(); // Prints 11 std::function&amp;lt;void(void)&amp;gt; func1 = closureWrapper1(); func1(); // Prints garbage value + 1 =~ garbage value } //===============================================================// &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;func1&lt;/code&gt; is not closure Instead, it’s a &lt;code&gt;std::function&lt;/code&gt; wrapper object that wrapped a closure.&lt;/p&gt; &lt;p&gt;&lt;code&gt;func0&lt;/code&gt; is a copy of a closure created by the lambda expression written after it.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;close-analog-to-a-closure&quot;&gt;Close analog to a closure&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Function Object (Functor)&lt;/strong&gt; — Function object overload the operator(). It could capture the values by making a copy of the variables to its member variables. The shortcoming is that for each different function call, regardless of how simple it is, we would have to implement a new class, whereas implementing a lambda expression is faster.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;http://scottmeyers.blogspot.com/2013/05/lambdas-vs-closures.html&quot;&gt;http://scottmeyers.blogspot.com/2013/05/lambdas-vs-closures.html&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://leimao.github.io/blog/CPP-Closure/&quot;&gt;https://leimao.github.io/blog/CPP-Closure/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/220658/what-is-the-difference-between-a-closure-and-a-lambda&quot;&gt;https://stackoverflow.com/questions/220658/what-is-the-difference-between-a-closure-and-a-lambda&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;p&gt;Thanks for reading this article! Feel free to leave your comments and let me know what you think. Please feel free to drop any comments to improve this article.&lt;/p&gt; &lt;p&gt;Please check out our &lt;a href=&quot;https://techmunching.com&quot;&gt;other articles&lt;/a&gt; and &lt;a href=&quot;https://techmunching.com&quot;&gt;website&lt;/a&gt;, Have a great day!&lt;/p&gt;</content><author><name>admin</name></author><category term="C++"/><summary type="html">What are closures vs how lambdas are different from closures?</summary></entry><entry><title type="html">Object construction order in case of virtual and/or multiple inheritance</title><link href="https://techmunching.com/object-construction-order-in-case-of-virtual-and-or-multiple-inheritance/" rel="alternate" type="text/html" title="Object construction order in case of virtual and/or multiple inheritance"/><published>2020-07-03T00:00:00+00:00</published><updated>2020-07-03T00:00:00+00:00</updated><id>https://techmunching.com/object-construction-order-in-case-of-virtual-and-or-multiple-inheritance</id><content type="html" xml:base="https://techmunching.com/object-construction-order-in-case-of-virtual-and-or-multiple-inheritance/">&lt;p&gt;How virtual vs. multiple inheritance affect class object construction order?&lt;/p&gt; &lt;div class=&quot;vidWrapper&quot;&gt; &lt;video style=&quot;max-width:100%&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt; &lt;source src=&quot;/img/0*VtNlssb8zTqF0nY9.mp4&quot; type=&quot;video/mp4&quot; /&gt; Your browser does not support the video tag. &lt;/video&gt; &lt;/div&gt; &lt;hr /&gt; &lt;p&gt;I’ll try to keep this post short and simple 😊&lt;/p&gt; &lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;An example class having virtual and/or multiple inheritance&lt;/li&gt; &lt;li&gt;What are the rules for object construction order?&lt;/li&gt; &lt;li&gt;Understanding the object construction order rules&lt;/li&gt; &lt;li&gt;Let’s apply the rules, shall we?&lt;/li&gt; &lt;li&gt;Bonus Question&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;example-a-class-having-virtual-andor-multiple-inheritance&quot;&gt;Example: A class having virtual and/or multiple inheritance&lt;/h3&gt; &lt;p&gt;class X is declared here as inherited by D1, D2 which in turn are inherited by other class in a complex manner by other classes.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_9ZFGEBfTvwaafG1tsZR4QQ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_9ZFGEBfTvwaafG1tsZR4QQ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_9ZFGEBfTvwaafG1tsZR4QQ.jpg&quot; alt=&quot;This will be our complex example&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;This will be our complex example&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Here as we clearly see following can be established — &lt;br /&gt; 1) V1 inherited by B1&lt;br /&gt; 2) D1 inherited by V1&lt;br /&gt; 3) V2 inherited by B1 and B2&lt;br /&gt; 4) D2 inherited by B3 and V2&lt;br /&gt; 5) X inherited by D1 and D2&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;what-are-the-rules-for-object-construction-order&quot;&gt;What are the rules for object construction order?&lt;/h3&gt; &lt;p&gt;The following set of rules is applied recursively:-&lt;/p&gt; &lt;h4 id=&quot;1-first-comes-virtual&quot;&gt;1. First comes virtual&lt;/h4&gt; &lt;p&gt;First, the most derived class’s constructor calls the constructors of the virtual base class subobjects. The very first constructors to be executed are the virtual base classes anywhere in the hierarchy. &lt;br /&gt; Virtual base classes are initialized &lt;strong&gt;In depth-first, left-to-right order.&lt;/strong&gt;&lt;/p&gt; &lt;h4 id=&quot;2-then-comes-multiple-inheritance-&quot;&gt;2. Then comes multiple inheritance —&lt;/h4&gt; &lt;p&gt;After all virtual base class constructors are finished, the construction order is generally from base class to derived class. Direct base class subobjects are constructed &lt;strong&gt;in the order they are declared in the class definition&lt;/strong&gt;.&lt;/p&gt; &lt;h4 id=&quot;3-next-comes-class-members&quot;&gt;3. Next comes class members&lt;/h4&gt; &lt;p&gt;Next, (nonstatic) member subobjects are constructed, in the order, they were declared in the class definition.&lt;/p&gt; &lt;h4 id=&quot;4-finally-the-constructor-body&quot;&gt;4. Finally the constructor body&lt;/h4&gt; &lt;p&gt;In the last, the body of the constructor is executed.&lt;/p&gt; &lt;p&gt;Also, one point to be noted is that —&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Whether the inheritance is public, protected, or private doesn’t affect initialization order&lt;/p&gt; &lt;/blockquote&gt; &lt;hr /&gt; &lt;h3 id=&quot;understanding-the-object-construction-order-rules&quot;&gt;Understanding the object construction order rules&lt;/h3&gt; &lt;p&gt;The rules are easiest to understand if you imagine that the very first thing the compiler does in the derived class’s constructor is to make a hidden call to the constructors of its virtual base and then non-virtual base classes (hint: that’s the way many compilers actually do it).&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;It’s like a DFS where the order on a same level is driven by class definitionExample — class &lt;strong&gt;&lt;em&gt;D&lt;/em&gt;&lt;/strong&gt; inherits from both &lt;em&gt;** B1 **&lt;/em&gt; and &lt;em&gt;** B2 **&lt;/em&gt;,&lt;/p&gt; &lt;/blockquote&gt; &lt;ol&gt; &lt;li&gt;The constructor for &lt;em&gt;**B1 **&lt;/em&gt; executes first&lt;/li&gt; &lt;li&gt;then the constructor for &lt;strong&gt;&lt;em&gt;B2&lt;/em&gt;&lt;/strong&gt;,&lt;/li&gt; &lt;li&gt;Then the constructor for &lt;strong&gt;&lt;em&gt;D&lt;/em&gt;&lt;/strong&gt;. &lt;br /&gt; This rule is applied recursively For example, if &lt;strong&gt;&lt;em&gt;B1 **&lt;/em&gt; inherits from **&lt;em&gt;B1a&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;B1b&lt;/em&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;em&gt;B2&lt;/em&gt;&lt;/strong&gt; inherits from &lt;strong&gt;&lt;em&gt;B2a&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;B2b&lt;/em&gt;&lt;/strong&gt;,&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;then the final order is&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;&lt;em&gt;B1a&lt;/em&gt;&lt;/strong&gt; =&amp;gt; &lt;strong&gt;&lt;em&gt;B1b&lt;/em&gt;&lt;/strong&gt; =&amp;gt; &lt;em&gt;**B1 **&lt;/em&gt;, and then&lt;/li&gt; &lt;li&gt;&lt;strong&gt;&lt;em&gt;B2a =&amp;gt; B2b =&amp;gt;&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;B2&lt;/em&gt;&lt;/strong&gt;*&lt;/li&gt; &lt;li&gt;&lt;em&gt;and ofcourse in the end&lt;/em&gt; &lt;strong&gt;D&lt;/strong&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Note that the order &lt;strong&gt;&lt;em&gt;B1 **&lt;/em&gt; and then **&lt;em&gt;B2&lt;/em&gt;&lt;/strong&gt; (or &lt;strong&gt;&lt;em&gt;B1a&lt;/em&gt;&lt;/strong&gt; then &lt;strong&gt;&lt;em&gt;B1b&lt;/em&gt;&lt;/strong&gt;) is determined by the order that the base classes appear in the declaration of the class, &lt;em&gt;not&lt;/em&gt; in the order that the initializer appears in the derived class’s initialization list.&lt;/p&gt; &lt;p&gt;[ Refer &lt;a href=&quot;https://medium.com/pranayaggarwal25/using-modern-class-members-and-initializations-c11e931c3ba&quot;&gt;https://medium.com/pranayaggarwal25/using-modern-class-members-and-initializations-c11e931c3ba&lt;/a&gt; for more details about class member initializations ]&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;lets-apply-the-rules-shall-we&quot;&gt;Let’s apply the rules, shall we?&lt;/h3&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_9ZFGEBfTvwaafG1tsZR4QQ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_9ZFGEBfTvwaafG1tsZR4QQ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_9ZFGEBfTvwaafG1tsZR4QQ.jpg&quot; alt=&quot;Looks easier now, doesn’t it?&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Looks easier now, doesn’t it?&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The initialization order for a X object in Example 2 is as follows, where each constructor call shown represents the execution of the body of that constructor:&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_a-qxlGwcVWru5zB3Xo_4Yw.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_a-qxlGwcVWru5zB3Xo_4Yw.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_a-qxlGwcVWru5zB3Xo_4Yw.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;p&gt;So —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_TTTVf62ztLB7o-Z0g3na2A.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_TTTVf62ztLB7o-Z0g3na2A.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_TTTVf62ztLB7o-Z0g3na2A.jpg&quot; alt=&quot;First — Construct the virtual bases V1 and V2 recursively by rules&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;First — Construct the virtual bases V1 and V2 recursively by rules&lt;/em&gt; After that, construct the remaining nonvirtual bases:&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_TY1_6ucxEUqM8HNQgeMsgQ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_TY1_6ucxEUqM8HNQgeMsgQ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_TY1_6ucxEUqM8HNQgeMsgQ.jpg&quot; alt=&quot;Second — Construct the remaining non-virtual bases D1 and D2&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Second — Construct the remaining non-virtual bases D1 and D2&lt;/em&gt; Next, construct the members &lt;strong&gt;&lt;em&gt;M1 **&lt;/em&gt; and **&lt;em&gt;M2 —&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_cDhZbtSxlmIfZanCtUjkAA.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_cDhZbtSxlmIfZanCtUjkAA.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_cDhZbtSxlmIfZanCtUjkAA.jpg&quot; alt=&quot;Third — Class member construction&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Third — Class member construction&lt;/em&gt; and in the last —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_d0jyqK1WZL9p4MfTVvnRlg.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_d0jyqK1WZL9p4MfTVvnRlg.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_d0jyqK1WZL9p4MfTVvnRlg.jpg&quot; alt=&quot;Final construction&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Final construction&lt;/em&gt;&lt;/p&gt; &lt;p&gt;if you’re a fan of graphics, here is how the inheritance hierarchy looks like :&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_lNJNK6S_PTgulnoservZoQ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_lNJNK6S_PTgulnoservZoQ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_lNJNK6S_PTgulnoservZoQ.jpg&quot; alt=&quot;Inheritance and object construction hierarchy (v means Virtual)&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Inheritance and object construction hierarchy (v means Virtual)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;That’s pretty much it!&lt;/p&gt; &lt;div class=&quot;vidWrapper&quot;&gt; &lt;video style=&quot;max-width:100%&quot; autoplay=&quot;&quot; muted=&quot;&quot; loop=&quot;&quot;&gt; &lt;source src=&quot;/img/0*RymMjGO7qYGCJPV2.mp4&quot; type=&quot;video/mp4&quot; /&gt; Your browser does not support the video tag. &lt;/video&gt; &lt;/div&gt; &lt;hr /&gt; &lt;h3 id=&quot;bonus-question-time-yay-&quot;&gt;Bonus Question Time, yay!! 😉&lt;/h3&gt; &lt;p&gt;Thanks for reading it till here.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;what-is-the-exact-order-of-destructors-in-a-multiple-andor-virtual-inheritance-situation&quot;&gt;What is the exact order of destructors in a multiple and/or virtual inheritance situation?&lt;/h3&gt; &lt;p&gt;The exact opposite of the same constructor order.&lt;/p&gt; &lt;p&gt;Reminder to make your base class’s destructor virtual, at least in the normal case. Why, I think you already know why? 😊&lt;/p&gt; &lt;p&gt;When someone says &lt;em&gt;delete&lt;/em&gt; using a &lt;em&gt;Base&lt;/em&gt; pointer that’s pointing at a &lt;em&gt;Derived&lt;/em&gt; object, had &lt;em&gt;Base&lt;/em&gt;’s destructor not been &lt;em&gt;virtual&lt;/em&gt;, &lt;em&gt;Derived&lt;/em&gt;’s destructor would not have been called – with likely bad effects, such as resources owned by Derived not being freed.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;http://www.gotw.ca/gotw/080.htm&quot;&gt;http://www.gotw.ca/gotw/080.htm&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://isocpp.org/wiki/faq/multiple-inheritance#mi-vi-ctor-order&quot;&gt;https://isocpp.org/wiki/faq/multiple-inheritance#mi-vi-ctor-order&lt;/a&gt; Thanks for reading this article! Feel free to leave your comments and let me know what you think. Please feel free to drop any comments to improve this article.&lt;br /&gt; Please check out our &lt;a href=&quot;https://techmunching.com&quot;&gt;other articles&lt;/a&gt; and &lt;a href=&quot;https://techmunching.com&quot;&gt;website&lt;/a&gt;, Have a great day!&lt;/li&gt; &lt;/ol&gt;</content><author><name>admin</name></author><category term="C++"/><category term="OOPS"/><summary type="html">How virtual vs. multiple inheritance affect class object construction order?</summary></entry><entry><title type="html">Using Modern C++ class members and initializations the right way</title><link href="https://techmunching.com/using-modern-c-class-members-and-initializations-the-right-way/" rel="alternate" type="text/html" title="Using Modern C++ class members and initializations the right way"/><published>2020-07-03T00:00:00+00:00</published><updated>2020-07-03T00:00:00+00:00</updated><id>https://techmunching.com/using-modern-c---class-members-and-initializations-the-right-way</id><content type="html" xml:base="https://techmunching.com/using-modern-c-class-members-and-initializations-the-right-way/">&lt;p&gt;Using In-member initialization, using constructors smartly and using class members functions in a safe and proper way to avoid mistakes&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/0_csRd0YjayeNTl96F.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/0_csRd0YjayeNTl96F.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/0_csRd0YjayeNTl96F.jpg&quot; alt=&quot;Clean code!&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Clean code!&lt;/em&gt;&lt;/p&gt; &lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Use member initializers in the same order as their declaration&lt;/li&gt; &lt;li&gt;Prefer in-class member initializer over constant initializations OR over default constructor.&lt;/li&gt; &lt;li&gt;Don’t cast away const, ever!&lt;/li&gt; &lt;li&gt;Use delegating constructors to represent common actions for all constructors of a class. &lt;h3 id=&quot;1-use-member-initializers-in-the-same-order-as-their-declaration&quot;&gt;1. Use member initializers in the same order as their declaration&lt;/h3&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Member variables are always initialized in the order they are declared in the class definition.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;The order in which you write them in the constructor initialization list is ignored 🥴&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Make sure the constructor code doesn’t confusingly specify different orders. For e.g. this case as below —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_Wzlu5I7J1KamJhQYob7_4w.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_Wzlu5I7J1KamJhQYob7_4w.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_Wzlu5I7J1KamJhQYob7_4w.jpg&quot; alt=&quot;Would lead to issuese&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Would lead to issuese&lt;/em&gt;&lt;/p&gt; &lt;p&gt;mail is declared before first_name and last_name in the class definition, hence as per the constructor call, it will be initialized first and will attempt to use the other not-yet-initialized fields which are first_name and last_name .&lt;/p&gt; &lt;h4 id=&quot;how-to-make-it-right&quot;&gt;How to make it right&lt;/h4&gt; &lt;p&gt;This code harbors a bug that’s as subtly harmful as it is hard to spot hence&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Write member initializers in the same order as their declarationMany compilers (but not all) will issue a warning if you break this rule. Modern compilers Clang, MSVC detect it with the right use of right warning flags.&lt;/p&gt; &lt;/blockquote&gt; &lt;h4 id=&quot;reason&quot;&gt;Reason&lt;/h4&gt; &lt;p&gt;The reason for this language design decision is to ensure there is a unique order to destroy members; otherwise, the destructor would have to destroy objects in different orders, depending on the constructor that built the object.&lt;/p&gt; &lt;h4 id=&quot;benefit&quot;&gt;Benefit&lt;/h4&gt; &lt;ol&gt; &lt;li&gt;Protects you from an oddity of the language without requiring everyone to know it.&lt;/li&gt; &lt;li&gt;Might encourage you to rethink your class design so this dependency goes away &lt;h3 id=&quot;2-prefer-in-class-member-initializer-over-constant-initializations-or-over-default-constructor&quot;&gt;2. Prefer in-class member initializer over constant initializations OR over default constructor&lt;/h3&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You should don’t define a default constructor that only initializes data members; use in-class member initializers instead which works as a good fallback in case you forget to initialize something.&lt;/p&gt; &lt;p&gt;Example — A bad class that misses one initialization in a constructor&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_iRhyfPkavdlODmNqmNEKsw.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_iRhyfPkavdlODmNqmNEKsw.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_iRhyfPkavdlODmNqmNEKsw.jpg&quot; alt=&quot;Cons of not using in-member class initializers&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Cons of not using in-member class initializers&lt;/em&gt;&lt;/p&gt; &lt;p&gt;where the following is an example of a much better class&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_GNGSOMx_9NcelulDaYnytg.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_GNGSOMx_9NcelulDaYnytg.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_GNGSOMx_9NcelulDaYnytg.jpg&quot; alt=&quot;Using in-member class initializers, Nice!!&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Using in-member class initializers, Nice!!&lt;/em&gt;&lt;/p&gt; &lt;h4 id=&quot;reason-1&quot;&gt;Reason&lt;/h4&gt; &lt;p&gt;Using in-class member initializers lets the compiler generate the function for you. Also, the compiler-generated function can be more efficient 😊&lt;/p&gt; &lt;h4 id=&quot;benefits&quot;&gt;Benefits&lt;/h4&gt; &lt;ol&gt; &lt;li&gt;No overhead of taking care of initializing constants separately in each constructor.&lt;/li&gt; &lt;li&gt;Performance gain by using standard default constructors. &lt;h3 id=&quot;3-dont-cast-away-const-ever&quot;&gt;3. Don’t cast away const, ever!&lt;/h3&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;We shouldn’t cast away from getter functions even when there seems a need.&lt;/p&gt; &lt;p&gt;For e.g. — Stuff is a class that does some calculations overnumber1 and number2 and computes the result. Now getValue() const is a function that fetches the value, and being a getter function is marked const.&lt;/p&gt; &lt;p&gt;number1 and number2 are updated byService1() and Service2() functions respectively.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_AuUxrjVaYzHmo_OacXV5qA.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_AuUxrjVaYzHmo_OacXV5qA.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_AuUxrjVaYzHmo_OacXV5qA.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;p&gt;Now, in case read frequency of getValue() is much more than the number of writes, we should preemptively update the cachedValue which is returned.&lt;/p&gt; &lt;p&gt;Such as —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_rqMbsx6k1igbaXt3OKW5dw.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_rqMbsx6k1igbaXt3OKW5dw.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_rqMbsx6k1igbaXt3OKW5dw.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;p&gt;However, in case the number of writes is much more, we should follow &lt;strong&gt;a lazy calculation approach&lt;/strong&gt; where we set a dirty flag such as below —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_TD_ZSa_Y2-jmsOZHZO8B2w.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_TD_ZSa_Y2-jmsOZHZO8B2w.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_TD_ZSa_Y2-jmsOZHZO8B2w.jpg&quot; alt=&quot;&quot; /&gt; &lt;/picture&gt; &lt;p&gt;getValue function would show error as it’s marked constBut this poses a problem because const function can not modify this **newly introduced class member variable **cachedValid .&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;A wrong fix **would be to remove const from&lt;/strong&gt; **getValue() function&lt;/li&gt; &lt;li&gt;&lt;em&gt;*Another wrong fix **would be to const_cast over “&lt;/em&gt;this”* pointer. &lt;h4 id=&quot;reason-2&quot;&gt;Reason&lt;/h4&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Doing this makes a lie out of const. Any variable is actually declared asconst, modifying it may result in undefined behavior.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Allows getValue() function to change anything in the instance.&lt;/li&gt; &lt;li&gt;The header file is now speaking a lie basically. &lt;h4 id=&quot;correct-fix&quot;&gt;Correct Fix&lt;/h4&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The right fix would be to declare cachedValid and cachedValue as mutable so that thegetValue() function can only modify the mutable ones.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_DgxaGoDSuAcpP58716AYRQ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_DgxaGoDSuAcpP58716AYRQ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_DgxaGoDSuAcpP58716AYRQ.jpg&quot; alt=&quot;The correct fix&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;The correct fix&lt;/em&gt;&lt;/p&gt; &lt;h4 id=&quot;benefits-of-correct-fix&quot;&gt;Benefits of correct fix&lt;/h4&gt; &lt;ul&gt; &lt;li&gt;Header file tells the truth&lt;/li&gt; &lt;li&gt;getValue() function can only change the mutable variables&lt;/li&gt; &lt;li&gt;Code accessing mutable members is shorter and more readable&lt;/li&gt; &lt;li&gt;Easier to write, read, and maintain&lt;/li&gt; &lt;li&gt;Const-correctness may enable optimizations 😊 &lt;h3 id=&quot;4-use-delegating-constructors-to-represent-common-actions-for-all-constructors-of-a-class&quot;&gt;4. Use delegating constructors to represent common actions for all constructors of a class&lt;/h3&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The common action gets tedious to write and may accidentally not be common. Hence, wherever possible we should refer to existing constructors.&lt;/p&gt; &lt;p&gt;For e.g. — This Date is a bad class.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_WNgLgmo1n2TEsdoGYPy_EQ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_WNgLgmo1n2TEsdoGYPy_EQ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_WNgLgmo1n2TEsdoGYPy_EQ.jpg&quot; alt=&quot;A bad series of constructors, duplicate logic&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;A bad series of constructors, duplicate logic&lt;/em&gt;&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_B5w6vP4oil0rnbYdMWkyng.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_B5w6vP4oil0rnbYdMWkyng.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_B5w6vP4oil0rnbYdMWkyng.jpg&quot; alt=&quot;Good!! Using delegating constructors&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Good!! Using delegating constructors&lt;/em&gt;&lt;/p&gt; &lt;h4 id=&quot;reason-3&quot;&gt;Reason&lt;/h4&gt; &lt;p&gt;To avoid repetition and accidental differences.&lt;/p&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XkDEzfpdcSg&quot;&gt;https://www.youtube.com/watch?v=XkDEzfpdcSg&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Coding-Standards-Rules-Guidelines-Practices/dp/0321113586&quot;&gt;C++ Coding Standards: 101 Rules, Guidelines, and Best Practices by Herb Sutter, Andrei Alexandrescu&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines&quot;&gt;https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines&lt;/a&gt; Thanks for reading this article! Feel free to leave your comments and let me know what you think. Please feel free to drop any comments to improve this article.&lt;br /&gt; Please check out our &lt;a href=&quot;https://techmunching.com&quot;&gt;other articles&lt;/a&gt; and &lt;a href=&quot;https://techmunching.com&quot;&gt;website&lt;/a&gt;, Have a great day!&lt;/li&gt; &lt;/ol&gt;</content><author><name>admin</name></author><category term="C++"/><summary type="html">Using In-member initialization, using constructors smartly and using class members functions in a safe and proper way to avoid mistakes</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techmunching.com/0_csRd0YjayeNTl96F"/><media:content medium="image" url="https://techmunching.com/0_csRd0YjayeNTl96F" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Passing smart pointers shared_ptr and unique_ptr</title><link href="https://techmunching.com/passing-smart-pointers-shared-ptr-and-unique-ptr/" rel="alternate" type="text/html" title="Passing smart pointers shared_ptr and unique_ptr"/><published>2020-06-17T00:00:00+00:00</published><updated>2020-06-17T00:00:00+00:00</updated><id>https://techmunching.com/passing-smart-pointers-shared-ptr-and-unique-ptr</id><content type="html" xml:base="https://techmunching.com/passing-smart-pointers-shared-ptr-and-unique-ptr/">&lt;p&gt;General guidelines to follow for passing shared_ptr and unique_ptr as function arguments and at the time of return.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/0*MKKxnMeiF8CTX0zm.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/0*MKKxnMeiF8CTX0zm.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/0*MKKxnMeiF8CTX0zm.jpg&quot; alt=&quot;As always, prefer unique\_ptr to shared\_ptr, unless you intend to share ownership&quot; /&gt; &lt;/picture&gt; &lt;blockquote&gt; &lt;p&gt;As always, prefer unique_ptr to shared_ptr, unless you intend to share ownership.&lt;/p&gt; &lt;/blockquote&gt; &lt;hr /&gt; &lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Always ask yourself “Do I really need to pass a smart pointer ?”&lt;/li&gt; &lt;li&gt;std::unique_ptr usage&lt;/li&gt; &lt;li&gt;std::shared_ptr usage&lt;/li&gt; &lt;li&gt;How to pass correctly pass raw pointer/reference?&lt;/li&gt; &lt;li&gt;For Returning smart pointers, what is the norm?&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;always-ask-yourself-do-i-really-need-to-pass-a-smart-pointer-&quot;&gt;Always ask yourself “Do I really need to pass a smart pointer ?”&lt;/h3&gt; &lt;p&gt;You should always assess if passing smart pointers as a function parameter is what you really need. In most cases, you just need to use it and be done with it. In those cases, it’s always good to get a raw pointer and pass it on.&lt;/p&gt; &lt;p&gt;Now before we go further, I must tell you that &lt;strong&gt;raw pointers aren’t always bad&lt;/strong&gt;. They can be quite useful in many cases as we’ll read in this post.&lt;/p&gt; &lt;hr /&gt; &lt;h4 id=&quot;guideline&quot;&gt;&lt;strong&gt;Guideline&lt;/strong&gt;&lt;/h4&gt; &lt;blockquote&gt; &lt;p&gt;Don’t pass a smart pointer as a function parameter unless you want to use or manipulate it, such as to share or transfer ownership. &lt;strong&gt;Prefer&lt;/strong&gt; passing objects by non-owning raw pointers (*) OR references (&amp;amp;).&lt;/p&gt; &lt;/blockquote&gt; &lt;h4 id=&quot;reason-and-example&quot;&gt;Reason and Example&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;void f( widget* ); void f( widget&amp;amp; ); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;They stay agnostic of whatever lifetime policy the caller use and are good to observe an object whose lifetime we know exceeds that of the pointer or reference.&lt;/p&gt; &lt;p&gt;This is restrictive and can’t beeasy to commit always then we’ll see and asset the best possible way to pass smart pointers.&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_CiD2BpQ9eDI1PX9OYMMLAQ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_CiD2BpQ9eDI1PX9OYMMLAQ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_CiD2BpQ9eDI1PX9OYMMLAQ.jpg&quot; alt=&quot;Step1: Know your lifetimes…The full picture would keep becoming more clear :)&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Step1: Know your lifetimes…The full picture would keep becoming more clear :)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;So following should be the guideline if we are sure about the lifetime —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_tuRoK1HFOMg2xkZcSGyTIw.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_tuRoK1HFOMg2xkZcSGyTIw.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_tuRoK1HFOMg2xkZcSGyTIw.jpg&quot; alt=&quot;Guideline to follow in case of no share or transfer of ownership and valid lifetime&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Guideline to follow in case of no share or transfer of ownership and valid lifetime&lt;/em&gt;&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;stdunique_ptr-usage&quot;&gt;std::unique_ptr usage&lt;/h3&gt; &lt;p&gt;&lt;em&gt;By value unique_ptr&amp;lt; type &amp;gt;&lt;/em&gt; assumes ownership of a &lt;em&gt;widget&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Reason:&lt;/strong&gt; This is the preferred way to express a consuming function, also known as a &lt;strong&gt;“sink”&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;Using &lt;em&gt;unique_ptr&lt;/em&gt; in this way in both documents and code, enforces well the function call’s ownership transfer (&lt;em&gt;Expresses a “sink” function)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Such as —&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;void sink(unique_ptr&amp;lt;widget&amp;gt;); // takes ownership of the widget // whereas void uses(widget*); // just uses the pointed object &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And a bad example is below —&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;void thinko(const unique_ptr&amp;lt;widget&amp;gt;&amp;amp;); // usually not what you want! &lt;/code&gt;&lt;/pre&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_hsARhJ6S3gqAHfiNkdIlGQ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_hsARhJ6S3gqAHfiNkdIlGQ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_hsARhJ6S3gqAHfiNkdIlGQ.jpg&quot; alt=&quot;unique_ptr passing guidelines&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;unique_ptr passing guidelines&lt;/em&gt;&lt;/p&gt; &lt;p&gt;and our guideline picture is now —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_cp9haQg73JXSEN-xfrJB-g.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_cp9haQg73JXSEN-xfrJB-g.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_cp9haQg73JXSEN-xfrJB-g.jpg&quot; alt=&quot;Step2: Know your transfers … More clear picture :)&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Step2: Know your transfers … More clear picture :)&lt;/em&gt;&lt;/p&gt; &lt;h4 id=&quot;guideline-1&quot;&gt;&lt;strong&gt;Guideline:&lt;/strong&gt;&lt;/h4&gt; &lt;blockquote&gt; &lt;p&gt;Express a “sink” function using a by-value &lt;em&gt;unique_ptr&lt;/em&gt; parameter. Use a non-const &lt;em&gt;unique_ptr&amp;amp;&lt;/em&gt; parameter only to modify the &lt;em&gt;unique_ptr&lt;/em&gt;.&lt;/p&gt; &lt;/blockquote&gt; &lt;h3 id=&quot;stdshared_ptr-usage&quot;&gt;std::shared_ptr usage&lt;/h3&gt; &lt;h4 id=&quot;passing-shared_ptr-by-value-only-when-you-are-sharing-the-ownership&quot;&gt;Passing shared_ptr by value only when you are sharing the ownership&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;void f( shared_ptr&amp;lt;widget&amp;gt; ); // only when you want to retain // object and share ownership &lt;/code&gt;&lt;/pre&gt; &lt;blockquote&gt; &lt;p&gt;Sharing ownership comes with a cost, so make sure you really mean and intend to pay that price.In pass by value, the argument is copied (usually unless temporary) on entry to the function, and then destroy it (always) on function exit.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Passing &lt;em&gt;shared_ptr&lt;/em&gt; by value means — &lt;br /&gt; 1) A new &lt;strong&gt;&lt;em&gt;shared_ptr&lt;/em&gt;&lt;/strong&gt; will be &lt;strong&gt;copy constructed.&lt;/strong&gt;&lt;br /&gt; 2) Ref count which is an atomic shared variable gets increased.&lt;br /&gt; 3) &lt;strong&gt;&lt;em&gt;shared_ptr&lt;/em&gt;&lt;/strong&gt; copy gets destroyed at the end of the function.&lt;br /&gt; 4) Ref count which is an atomic shared variable gets decreased.&lt;/p&gt; &lt;p&gt;[ Related post: &lt;a href=&quot;https://medium.com/pranayaggarwal25/a-tale-of-two-allocations-f61aa0bf71fc&quot;&gt;https://medium.com/pranayaggarwal25/a-tale-of-two-allocations-f61aa0bf71fc&lt;/a&gt; ]&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;void f( const shared_ptr&amp;amp;&amp;lt;widget&amp;gt; ); // may share ownership void f( shared_ptr&amp;amp;&amp;lt;widget&amp;gt; ); // may reset pointerIn the special case where the function *might* share ownership but doesn’t necessarily take a copy of its parameter on a given call, then pass a const-ref to avoid the copy on the calls that don’t need it. &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So for &lt;strong&gt;&lt;em&gt;shared_ptr&lt;/em&gt;&lt;/strong&gt; follow this —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_1VklHsi0KmZw17S5o0VW8Q.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_1VklHsi0KmZw17S5o0VW8Q.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_1VklHsi0KmZw17S5o0VW8Q.jpg&quot; alt=&quot;shared_ptr passing guidelines&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;shared_ptr passing guidelines&lt;/em&gt; And finally, we have our full guideline picture here —&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/1_GZhPV6_u-926_gDzo-_RHg.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/1_GZhPV6_u-926_gDzo-_RHg.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/1_GZhPV6_u-926_gDzo-_RHg.jpg&quot; alt=&quot;Step3: The final guideline picture&quot; /&gt; &lt;/picture&gt; &lt;p&gt;&lt;em&gt;Step3: The final guideline picture&lt;/em&gt;&lt;/p&gt; &lt;h3 id=&quot;how-to-pass-correctly-pass-raw-pointerreference&quot;&gt;How to pass correctly pass raw pointer/reference?&lt;/h3&gt; &lt;p&gt;As we have seen above that functions should prefer to pass raw pointers and references down call chains wherever possible.&lt;/p&gt; &lt;p&gt;At the top of the call tree where you obtain the raw pointer or reference from a smart pointer that keeps the object alive. You need to be sure that the smart pointer cannot inadvertently be reset or reassigned from within the call tree below.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;To do this, sometimes you need to take a local copy of a smart pointer, which firmly keeps the object alive for the duration of the function and the call tree.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Consider this code, the following should not pass code review:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; // global (static or heap), or aliased local ... shared_ptr&amp;lt;widget&amp;gt; g_p = ...; void my_code() { // BAD: passing pointer or reference obtained from a non-local // smart pointer that could be inadvertently reset somewhere // inside f or its callees f(*g_p); // BAD: same reason, just passing it as a &quot;this&quot; pointer g_p-&amp;gt;func(); } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The fix is simple — take a local copy of the pointer to keep a ref count for your call tree:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;// global (static or heap), or aliased local ... shared_ptr&amp;lt;widget&amp;gt; g_p = ...; void my_code() { // **cheap:** 1 increment covers this entire function and call trees auto pin = g_p; // **GOOD:** passing pointer or reference obtained from a local // unaliased smart pointer f(*pin); // **GOOD:** same reason pin-&amp;gt;func(); } &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;h3 id=&quot;for-returning-smart-pointers-what-is-the-norm&quot;&gt;For Returning smart pointers, what is the norm?&lt;/h3&gt; &lt;p&gt;You should follow the same logic above:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Return smart pointers if the caller wants to manipulate the smart pointer itself, return raw pointers/references if the caller just needs a handle to the underlying object.If you really need to return smart pointers from a function, take it easy and always return &lt;em&gt;by value&lt;/em&gt;. That is:&lt;/p&gt; &lt;/blockquote&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;std::unique_ptr&amp;lt;Object&amp;gt; getUnique(); std::shared_ptr&amp;lt;Object&amp;gt; getShared(); std::weak_ptr&amp;lt;Object&amp;gt; getWeak(); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There are at least three good reasons for this:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;strong&gt;Move Semantics&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Smart pointers are powered by move semantics: the dynamically-allocated resource they hold is moved around, not wastefully copied.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Return Value Optimization (RVO)&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt;All modern compilers are able to detect that you are returning an object by value, and they apply a sort of return shortcut to avoid useless copies. Starting from C++17, this is guaranteed by the standard. Returning by reference inhibits that shortcut.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Object deletion probability —&lt;/strong&gt; Returning &lt;em&gt;std::shared_ptr&lt;/em&gt; by reference doesn’t properly increment the reference count, which opens up the risk of deleting something at the wrong time, by incurring the risk of having the object deleted (that may be local) when it goes out of scope in another context. Thanks to RVO. you don’t need to move anything when returning a &lt;em&gt;std::unique_ptr&lt;/em&gt; also.&lt;/li&gt; &lt;/ol&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt; std::unique_ptr&amp;lt;Object&amp;gt; getUnique() { std::unique_ptr&amp;lt;Object&amp;gt; p = std::make_unique&amp;lt;Object&amp;gt;(); return p; // also return std::make_unique&amp;lt;Object&amp;gt;(); } &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/&quot;&gt;https://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-uniqueptrparam&quot;&gt;http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-uniqueptrparam&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://www.internalpointers.com/post/move-smart-pointers-and-out-functions-modern-c&quot;&gt;https://www.internalpointers.com/post/move-smart-pointers-and-out-functions-modern-c&lt;/a&gt; Thanks for reading this article! Feel free to leave your comments and let me know what you think. Please feel free to drop any comments to improve this article.&lt;br /&gt; Please check out our &lt;a href=&quot;https://techmunching.com&quot;&gt;other articles&lt;/a&gt; and &lt;a href=&quot;https://techmunching.com&quot;&gt;website&lt;/a&gt;, Have a great day!&lt;/li&gt; &lt;/ol&gt;</content><author><name>admin</name></author><category term="C++"/><summary type="html">General guidelines to follow for passing shared_ptr and unique_ptr as function arguments and at the time of return.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techmunching.com/0*MKKxnMeiF8CTX0zm"/><media:content medium="image" url="https://techmunching.com/0*MKKxnMeiF8CTX0zm" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Few Modern C++ Puzzles</title><link href="https://techmunching.com/few-modern-c-puzzles/" rel="alternate" type="text/html" title="Few Modern C++ Puzzles"/><published>2020-06-15T00:00:00+00:00</published><updated>2020-06-15T00:00:00+00:00</updated><id>https://techmunching.com/few-modern-c---puzzles</id><content type="html" xml:base="https://techmunching.com/few-modern-c-puzzles/">&lt;p&gt;Some puzzles from various talks, blog posts, and other bits&lt;/p&gt; &lt;picture&gt; &lt;source type=&quot;image/webp&quot; srcset=&quot;/img/0_3StcFi7Mii7eFJOZ.webp&quot; /&gt; &lt;source type=&quot;image/jpg&quot; srcset=&quot;/img/0_3StcFi7Mii7eFJOZ.jpg&quot; /&gt; &lt;img loading=&quot;lazy&quot; src=&quot;/img/0_3StcFi7Mii7eFJOZ.jpg&quot; alt=&quot;Some puzzles from various talks, blog posts, and other bits&quot; /&gt; &lt;/picture&gt; &lt;h3 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;Puzzle 1: Capturing unique_ptr by reference&lt;/li&gt; &lt;li&gt;Puzzle 2: Capturing the temporary by the reference&lt;/li&gt; &lt;li&gt;Puzzle 3: Making mistakes with std functions usage&lt;/li&gt; &lt;li&gt;Puzzle 4: Throwing away the dead&lt;/li&gt; &lt;/ol&gt; &lt;hr /&gt; &lt;h3 id=&quot;puzzle-1-capturing-unique_ptr-by-reference&quot;&gt;Puzzle 1: Capturing unique_ptr by reference&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;unique_ptr&amp;lt;A&amp;gt; myFun() { unique_ptr&amp;lt;A&amp;gt; pa(new A()); return pa; } const A&amp;amp; rA = *myFun(); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This code compiles but &lt;code&gt;rA&lt;/code&gt; contains garbage. Why is this code invalid?&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if we assign the return of &lt;code&gt;myFun&lt;/code&gt; to a named &lt;code&gt;unique_ptr&lt;/code&gt; variable before dereferencing it, it works fine.&lt;/p&gt; &lt;h4 id=&quot;answer&quot;&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;The &lt;code&gt;unique_ptr&lt;/code&gt; will pass the ownership to another &lt;code&gt;unique_ptr&lt;/code&gt;, but in this code, there is nothing to capture the ownership from the returning pointer. In other words, It can not transfer the ownership, so it will be destructed. The proper way is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;unique_ptr&amp;lt;A&amp;gt; rA = myFun(); // Pass the ownership &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;const A rA = *myFun(); // Store the values before destruction &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In this code, the returning pointer will be destructed and the reference is referring to an object which is destructing soon after that using this reference invokes undefined behavior.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;puzzle-2-capturing-the-temporary-by-the-reference&quot;&gt;Puzzle 2: Capturing the temporary by the reference&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;vector&amp;lt;bool&amp;gt; vb{true, true, false, true}; auto proxy = vb[0]; std::cout &amp;lt;&amp;lt; proxy // ok, Prints true vb.reserve(100); // A: ??? std::cout &amp;lt;&amp;lt; proxy // Error!! likely to print false on clang, why? &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;answer-1&quot;&gt;Answer:&lt;/h4&gt; &lt;p&gt;Line A invalidates proxy so &lt;code&gt;proxy&lt;/code&gt; was invalidated by &lt;code&gt;vb.reserve&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Take below example —&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;void example_1_1_3() { string_view s; // s points to null string name = &quot;abcdefghijklmnop&quot;; s = name; // A: s points to {name'} i.e. data owned by name’ cout &amp;lt;&amp;lt; s[0]; // B: ok – s[0] is ok because {a} is alive name = &quot;frobozz&quot;; // C: name modified =&amp;gt; name’ is invalid cout &amp;lt;&amp;lt; s[0]; // D: error – because it contains {invalid} } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;which is why guideline says –&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Never use the reference in case of a temporary argument.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Take below example —&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;char&amp;amp; c = std::string{&quot;hello my pretty long string&quot;}[0]; cout &amp;lt;&amp;lt; c; // (X) wrong to initialize a // reference ‘c’ with an invalid pointer, pointer // was invalidated with temporary string was // destroyed. &lt;/code&gt;&lt;/pre&gt; &lt;hr /&gt; &lt;h3 id=&quot;puzzle-3-making-mistakes-with-std-functions-usage&quot;&gt;Puzzle 3: Making mistakes with std functions usage&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int main() { auto x=10, y=2; auto&amp;amp; good = min(x,y); // ok, {x,y} cout &amp;lt;&amp;lt; good; // ok, fine. auto&amp;amp; bad = min(x,y+1) cout &amp;lt;&amp;lt; bad; // ERROR, why?? } &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;answer-2&quot;&gt;Answer:&lt;/h4&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int main() { auto x=10, y=2; auto&amp;amp; good = min(x,y); // ok, {x,y} cout &amp;lt;&amp;lt; good; // ok, fine. auto&amp;amp; bad = min(x,y+1) // A: IN: {x, temp(y+1)} // OUT: temp2 obtained by {x,temp} // min() returns temp2 // temp destroyed hence → temp2 = {invalid} cout &amp;lt;&amp;lt; bad; // ERROR, bad initialized as invalid now } &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In normal C++, this code compiles but has &lt;strong&gt;undefined behavior&lt;/strong&gt;.&lt;br /&gt; Note In practice, on the three major compilers (GCC, VC++, clang) this code does not crash and appears to work. That’s because one manifestation of “undefined behavior” can be “&lt;em&gt;happens to do what you expect.&lt;/em&gt;”&lt;/p&gt; &lt;p&gt;Nevertheless, this is undefined so one should be careful.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;puzzle-4-throwing-away-the-dead&quot;&gt;Puzzle 4: Throwing away the dead&lt;/h3&gt; &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;// godbolt.org/z/p_QjCR static int gi = 0; void f() { int i = 0; throw &amp;amp;i; // ERROR, why?? throw &amp;amp;gi; // OK } &lt;/code&gt;&lt;/pre&gt; &lt;h4 id=&quot;answer-3&quot;&gt;Answer:&lt;/h4&gt; &lt;p&gt;Unlike a return, the type of a thrown object cannot be carried through function signatures. Therefore, do not throw a Pointer with a lifetime other than static.&lt;/p&gt; &lt;hr /&gt; &lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/30858850/dereferencing-a-temporary-unique-ptr&quot;&gt;https://stackoverflow.com/questions/30858850/dereferencing-a-temporary-unique-ptr&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1179r0.pdf&quot;&gt;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1179r0.pdf&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;</content><author><name>admin</name></author><category term="C++"/><category term="C++20"/><summary type="html">Some puzzles from various talks, blog posts, and other bits</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://techmunching.com/0_3StcFi7Mii7eFJOZ"/><media:content medium="image" url="https://techmunching.com/0_3StcFi7Mii7eFJOZ" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>